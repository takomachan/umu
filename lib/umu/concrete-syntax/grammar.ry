# coding: utf-8
# frozen_string_literal: true

class Umu::ConcreteSyntax::Parser


convert
    KIND_OF ":'KIND-OF?'"
end

prechigh
    left    POW
    left    '*' '/' MOD
    left    '+' '-' '^'
    left    '==' '<>' '<' '>' '<=' '>='
    left    '++'
    left    '>>'
    right   '<<'
    left    '|>'
    right   '<|'
    left    KIND_OF
    left    '&&' '||'
preclow



rule

# Statement

stmts:
  stmt              { result = val[0] }
| stmt ';;' stmts   { result = val[0] + val[2] }

stmt:
  modu_decls    { result = val[0] }
| expr          { result = [val[0]] }



#########################################
####  Declaration (Module Language)  ####
#########################################

modu_decls:
  /* empty */           { result = [] }
| modu_decl modu_decls  { result = [val[0]] + val[1] }


modu_decl:
  STRUCTURE ID '=' modu_expr {
    var_pat = CSMP.make_variable val[1].loc, val[1].sym

    result = CSMD.make_structure val[0].loc, var_pat, val[3]
}
| IMPORT modu_long_id opt_import_body {
    result = CSMD.make_import val[0].loc, val[1], val[2]
}
| core_decl {
    result = CSMD.make_core val[0].loc, val[0]
}


# Optional body of import declaration

opt_import_body:
  /* empty */           { result = nil }
| '{' import_flds '}'   { result = val[1] }


# Import field

import_flds:
  /* empty */               { result = [] }
| import_fld import_flds    { result = [val[0]] + val[1] }

import_fld:
  VAL _import_fld {
    result = CSMD.make_value_fields_of_import val[0].loc,  val[1]
}
| FUN _import_fld {
    result = CSMD.make_function_fields_of_import val[0].loc,  val[1]
}
| STRUCTURE _import_fld {
    result = CSMD.make_structure_fields_of_import val[0].loc,  val[1]
}

_import_fld:
  atom_import_fld {
    result = [val[0]]
}
|  '(' atom_import_fld com_import_flds ')' {
    result = [val[1]] + val[2]
}


# Comma separated seq of import field

com_import_flds:
  /* empty */       { result = [] }
| _com_import_flds  { result = val[0] }

_com_import_flds:
  ',' atom_import_fld                   { result = [val[1]] }
| ',' atom_import_fld _com_import_flds  { result = [val[1]] + val[2] }


# Atomic import field

atom_import_fld: var_pat opt_import_var {
    result = [
        CSME.make_identifier(val[0].loc, val[0].var_sym),
        val[0].opt_type_sym,
        val[1]
    ]
}

opt_import_var:
  /* empty */       { result = nil }
| '=' modu_long_id  { result = val[1] }



########################################
####  Expression (Module Language)  ####
########################################

modu_expr:
  STRUCT '{' modu_decls '}' modu_where_decls {
    result = CSME.make_struct val[0].loc, val[2], val[4]
}
| modu_long_id { result = val[0] }


# WHERE declaration (Module Language)

modu_where_decls:
  /* empty */               { result = [] }
| WHERE '{' modu_decls '}'  { result = val[2] }


# Module long identifire

modu_long_id: modu_path ID {
    last_id = CSME.make_identifier val[1].loc, val[1].sym

    result = if val[0].empty?
                last_id
            else
                head_id, *tail_ids = val[0]

                CSME.make_long_identifier(
                            head_id.loc, head_id, tail_ids + [last_id]
                        )
            end
}

modu_path:
  /* empty */           { result = [] }
| MODULE_DIR modu_path  {
    result = [CSME.make_identifier(val[0].loc, val[0].sym)] + val[1]
}



#######################################
####  Declaration (Core Language)  ####
#######################################

core_decls:
  /* empty */           { result = [] }
| core_decl core_decls  { result = [val[0]] + val[1] }

core_decl:
  VAL pat '=' expr outer_where_decls {
    result = CSCD.make_value(
                    val[0].loc, val[1], val[3], val[4]
                )
}
| FUN var_pat '=' fun_body {
    hd_pat, tl_pats, expr, decls = val[3]

    result = CSCD.make_function(
        val[1].loc,
        CSCE.make_named_lambda(
            val[1].loc,
            [hd_pat] + tl_pats, expr, decls,
            val[1].var_sym
        )
    )
}
| FUN REC recu_bind recu_binds {
    result = CSCD.make_recursive val[0].loc, [val[2]] + val[3]
}
| ASSERT atom_expr expr {
    result = CSCD.make_assert val[0].loc, val[1], val[2]
}


# Recursive binding

recu_binds:
  /* empty */   { result = [] }
| _recu_binds   { result = val[0] }

_recu_binds:
  AND recu_bind             { result = [val[1]] }
| AND recu_bind _recu_binds { result = [val[1]] + val[2] }

recu_bind: ID '=' fun_body {
    hd_pat, tl_pats, expr, decls = val[2]

    result = CSCD.make_recursive_function(
        val[1].loc,
        CSCE.make_named_lambda(
            val[0].loc,
            [hd_pat] + tl_pats, expr, decls,
            val[0].sym
        )
    )
}


# Function body

fun_body: pat pats '->' expr outer_where_decls {
    result = [val[0], val[1], val[3], val[4]]
}


# WHERE declaration (Core Language)

outer_where_decls:
  /* empty */               { result = [] }
| WHERE '{' core_decls '}'  { result = val[2] }


inner_where_decls:
  /* empty */               { result = [] }
| WHERE core_decls          { result = val[1] }


######################################
####  Expression (Core Language)  ####
######################################

opt_expr:
  /* empty */   { result = nil }
| expr          { result = val[0] }

expr:
  resrv_infix_expr
| IF if_rule elsif_rules ELSE expr {
    result = CSCE.make_if val[0].loc, val[1], val[2], val[4]
}
| COND atom_expr '{' cond_rule cond_rules opt_else_clause '}' {
    else_expr, else_decls = val[5]

    result = CSCE.make_cond(
                val[0].loc, val[1], val[3], val[4], else_expr, else_decls
            )
}
| CASE atom_expr '{' case_rule case_rules opt_else_clause '}' {
    else_expr, else_decls = val[5]

    result = CSCE.make_case(
                val[0].loc, val[1], val[3], val[4], else_expr, else_decls
            )
}
| LET '{' core_decls IN expr '}' {
    result = CSCE.make_let val[0].loc, val[2], val[4]
}

opt_else_clause:
  /* empty */                       { result = [nil,    []]     }
| ELSE '->' expr inner_where_decls  { result = [val[2], val[3]] }


# If-expression Rule

elsif_rules:
  /* empty */       { result = [] }
| _elsif_rules      { result = val[0] }

_elsif_rules:
  ELSIF if_rule                 { result = [val[1]] }
| ELSIF if_rule _elsif_rules    { result = [val[1]] + val[2] }

if_rule: atom_expr expr {
    result = CSCE.make_if_rule val[0].loc, val[0], val[1]
}


# Cond-expresson Rule

cond_rules:
  /* empty */   { result = [] }
| _cond_rules   { result = val[0] }

_cond_rules:
  '|' cond_rule             { result = [val[1]] }
| '|' cond_rule _cond_rules { result = [val[1]] + val[2] }

cond_rule: expr '->' expr inner_where_decls {
    result = CSCE.make_cond_rule val[0].loc, val[0], val[2], val[3]
}


# Case-expresson Rule

case_rules:
  /* empty */   { result = [] }
| _case_rules   { result = val[0] }

_case_rules:
  '|' case_rule             { result = [val[1]] }
| '|' case_rule _case_rules { result = [val[1]] + val[2] }

case_rule: case_rule_head '->' expr inner_where_decls {
    result = CSCE.make_case_rule val[0].loc, val[0], val[2], val[3]
}

case_rule_head:
  INT       { result = CSCE.make_case_rule_atom(
                                val[0].loc, VC.make_integer(val[0].val)
                            )
}
| REAL      { result = CSCE.make_case_rule_atom(
                                val[0].loc, VC.make_real(val[0].val)
                            )
}
| STRING    { result = CSCE.make_case_rule_atom(
                                val[0].loc, VC.make_string(val[0].val)
                            )
}
| SYMBOL    { result = CSCE.make_case_rule_atom(
                                val[0].loc, VC.make_symbol(val[0].val)
                            )
}
| ID opt_pat {
    result = CSCE.make_case_rule_datum val[0].loc, val[0].sym, val[1]
}
| '&' ID opt_pat {
    result = CSCE.make_case_rule_class(
                        val[0].loc,
                        CSCE.make_identifier(val[1].loc, val[1].sym),
                        val[2]
                    )
}
| '[' ']' {
    result = CSCE.make_case_rule_class(
                        val[0].loc,
                        CSCE.make_identifier(val[0].loc, :Nil),
                        CSCP.make_unit(val[0].loc),
                        CSCE.make_identifier(val[0].loc, :List)
                    )
}
| '[' var_pat opt_last_pat ']' {
    tail = if val[2]
                val[2]
            else
                CSCP.make_variable val[0].loc, WILDCARD, :Nil
            end

    result = CSCE.make_case_rule_class(
                        val[0].loc,
                        CSCE.make_identifier(val[0].loc, :Cons),
                        CSCP.make_tuple(val[0].loc, [val[1], tail]),
                        CSCE.make_identifier(val[0].loc, :List)
                    )
}


# Reserved infix operator expression

resrv_infix_expr:
  redef_infix_expr
| resrv_infix_expr '<<' resrv_infix_expr {
    result = CSCE.make_comp_right val[0].loc, val[0], val[1].sym, val[2]
}
| resrv_infix_expr '>>' resrv_infix_expr {
    result = CSCE.make_comp_left  val[0].loc, val[0], val[1].sym, val[2]
}
| resrv_infix_expr '<|' resrv_infix_expr {
    result = CSCE.make_pipe_right val[0].loc, val[0], val[1].sym, val[2]
}
| resrv_infix_expr '|>' resrv_infix_expr {
    result = CSCE.make_pipe_left  val[0].loc, val[0], val[1].sym, val[2]
}
| resrv_infix_expr KIND_OF ID {
    ty_ident = CSCE.make_identifier val[2].loc, val[2].sym

    result = CSCE.make_kindof     val[0].loc, val[0], val[1].sym, ty_ident
}
| resrv_infix_expr '&&' resrv_infix_expr {
    result = CSCE.make_andalso    val[0].loc, val[0], val[1].sym, val[2]
}
| resrv_infix_expr '||' resrv_infix_expr {
    result = CSCE.make_orelse     val[0].loc, val[0], val[1].sym, val[2]
}


# Redefinable infix operator expression

redef_infix_expr:
  send_expr
| _redef_infix_expr {
    v = val[0]

    result = CSCE.make_infix v[0].loc, v[0], v[1].sym, v[2]
}

_redef_infix_expr:
  redef_infix_expr '+'    redef_infix_expr  { result = val }
| redef_infix_expr '-'    redef_infix_expr  { result = val }
| redef_infix_expr '^'    redef_infix_expr  { result = val }
| redef_infix_expr '*'    redef_infix_expr  { result = val }
| redef_infix_expr '/'    redef_infix_expr  { result = val }
| redef_infix_expr MOD    redef_infix_expr  {
    result = [
                val[0],
                LT.make_reserved_symbol(val[1].loc, 'mod'),
                val[2]
            ]
}
| redef_infix_expr POW    redef_infix_expr  {
    result = [
                val[0],
                LT.make_reserved_symbol(val[1].loc, 'pow'),
                val[2]
            ]
}
| redef_infix_expr '=='    redef_infix_expr { result = val }
| redef_infix_expr '<>'    redef_infix_expr { result = val }
| redef_infix_expr '<'     redef_infix_expr { result = val }
| redef_infix_expr '>'     redef_infix_expr { result = val }
| redef_infix_expr '<='    redef_infix_expr { result = val }
| redef_infix_expr '>='    redef_infix_expr { result = val }
| redef_infix_expr '++'    redef_infix_expr { result = val }


# Send expression

send_expr: apply_expr messages {
    result = if val[1].empty?
                    val[0]
                else
                    hd_msg, *tl_msgs = val[1]

                    CSCE.make_send val[0].loc, val[0], hd_msg, tl_msgs
                end
}

messages:
  /* empty */           { result = [] }
| _messages             { result = val[0] }

_messages:
  message           { result = [val[0]] }
| message _messages { result = [val[0]] + val[1] }

message:
  '$' INT {
    result = CSCE.make_number_selector val[1].loc, val[1].val
}
| '$' ID {
    result = CSCE.make_label_selector  val[1].loc, val[1].sym
}
| '$' '(' named_fld com_named_flds ')' {
    result = CSCE.make_modifier val[0].loc, [val[2]] + val[3]
}
| '.' meth_ident atom_exprs {
    result = CSCE.make_method val[1].loc, val[1].sym, val[2]
}

meth_ident: ID | norm_infix_opr


# Apply expression

apply_expr: atom_expr atom_exprs {
    result = if val[1].empty?
                    val[0]
                else
                    hd_expr, *tl_exprs = val[1]

                    CSCE.make_apply val[0].loc, val[0], hd_expr, tl_exprs
                end
}


# Atomic expression

atom_exprs:
  /* empty */           { result = [] }
| atom_expr atom_exprs  { result = [val[0]] + val[1] }

atom_expr:
# Identifier
  ID {
    result = CSCE.make_identifier val[0].loc, val[0].sym
}
| '(' infix_opr ')' {
    result = CSCE.make_identifier val[1].loc, val[1].sym
}
| MODULE_DIR path ID {
    head_id = CSCE.make_identifier val[0].loc, val[0].sym
    last_id = CSCE.make_identifier val[2].loc, val[2].sym

    result = CSCE.make_long_identifier(
                        val[0].loc, head_id, val[1] + [last_id]
                    )
}
| MODULE_DIR path '(' infix_opr ')' {
    head_id = CSCE.make_identifier val[0].loc, val[0].sym
    last_id = CSCE.make_identifier val[3].loc, val[3].sym

    result = CSCE.make_long_identifier(
                        val[0].loc, head_id, val[1] + [last_id]
                    )
}

# Constant
| INT       { result = CSCE.make_integer    val[0].loc, val[0].val }
| REAL      { result = CSCE.make_real       val[0].loc, val[0].val }
| STRING    { result = CSCE.make_string     val[0].loc, val[0].val }
| SYMBOL    { result = CSCE.make_symbol     val[0].loc, val[0].sym }
| __FILE__ {
    loc = val[0].loc

    result = CSCE.make_string loc, loc.file_name
}
| __LINE__ {
    loc = val[0].loc

    result = CSCE.make_integer loc, loc.line_num
}

# Braket: ( ... )
| '(' ')' {
    result = CSCE.make_unit val[0].loc
}
| '(' expr ')' {
    result = val[1]
}
| '(' infix_opr expr ')' {
    result = CSCE.make_prefix val[1].loc, val[1].sym, val[2]
}
| '(' expr ',' expr com_exprs ')' {
    result = CSCE.make_tuple val[0].loc, [val[1], val[3]] + val[4]
}
| '(' named_fld ',' named_fld com_named_flds ')' {
    result = CSCE.make_named_tuple val[0].loc, [val[1], val[3]] + val[4]
}
| '(' expr ';' expr sem_exprs ')' {
    result = CSCE.make_sequence val[0].loc, [val[1], val[3]] + val[4]
}
| '&(' meth_ident ')' {
    result = CSCE.make_functionalized_method(
                    val[0].loc,
                    CSCE.make_identifier(val[1].loc, val[1].sym)
                )
}
| '&(' ID '.'  meth_ident ')' {
    result = CSCE.make_functionalized_method(
                    val[0].loc,
                    CSCE.make_identifier(val[3].loc, val[3].sym),
                    CSCE.make_identifier(val[1].loc, val[1].sym)
                )
}

# Braket: [ ... ]
| '[' ']' {
    result = CSCE.make_list val[0].loc, [],                nil
}
| '[' expr com_exprs opt_last_expr ']' {
    result = CSCE.make_list val[0].loc, [val[1]] + val[2], val[3]
}
| '[' '|' expr com_exprs '|' qualifiers  ']' {
    expr = if val[3].empty?
                val[2]
            else
                CSCE.make_tuple val[0].loc, [val[2]] + val[3]
            end

    result = CSCE.make_comprehension val[0].loc, expr, val[5]
}
| '[' '|' named_fld ',' named_fld com_named_flds '|' qualifiers  ']' {
    expr = CSCE.make_named_tuple val[0].loc, [val[2], val[4]] + val[5]

    result = CSCE.make_comprehension val[0].loc, expr, val[7]
}

# Braket: { ... }
| '{' pat pats '->' expr inner_where_decls '}' {
    result = CSCE.make_lambda val[0].loc, [val[1]] + val[2], val[4], val[5]
}
| '&{' ID '}' {
    result = CSCE.make_class val[1].loc, val[1].sym
}


# Module path (Core Language)

path:
  /* empty */     { result = [] }
| MODULE_DIR path {
    result = [CSCE.make_identifier(val[0].loc, val[0].sym)] + val[1]
}


# Semi-colon separated seq of expresseion

sem_exprs:
  /* empty */   { result = [] }
| _sem_exprs    { result = val[0] }

_sem_exprs:
  ';' expr              { result = [val[1]] }
| ';' expr _sem_exprs   { result = [val[1]] + val[2] }


# Comma separated seq of expresseion

com_exprs:
  /* empty */   { result = [] }
| _com_exprs    { result = val[0] }

_com_exprs:
  ',' expr              { result = [val[1]] }
| ',' expr _com_exprs   { result = [val[1]] + val[2] }


# Last of collection expression

opt_last_expr:
  /* empty */   { result = nil }
| '|' expr      { result = val[1] }


# Comma separated seq of named field

com_named_flds:
  /* empty */       { result = [] }
| _com_named_flds   { result = val[0] }

_com_named_flds:
  ',' named_fld                 { result = [val[1]] }
| ',' named_fld _com_named_flds { result = [val[1]] + val[2] }

named_fld: LABEL opt_expr {
    result = [
        CSCE.make_named_tuple_label(val[0].loc, val[0].sym),
        val[1]
    ]
}


# Qualifiers for List Comprehension

qualifiers:
  /* empty */           { result = [] }
| qualifier             { result = [val[0]] }
| qualifier _qualifiers { result = [val[0]] + val[1] }

_qualifiers:
  qualifier             { result = [val[0]] }
| qualifier _qualifiers { result = [val[0]] + val[1] }

qualifier:
  VAL pat '<-' expr {
    result = CSCE.make_generator val[0].loc, val[1], val[3]
}
| IF expr {
    result = CSCE.make_guard val[0].loc, val[1]
}



###################################
####  Pattern (Core Language)  ####
###################################

pats:
  /* empty */   { result = [] }
| pat pats      { result = [val[0]] + val[1] }


opt_pat:
  /* empty */   { result = nil }
| pat           { result = val[0] }


pat:
# Variable
  var_pat

# Braket: ( ... )
| '(' ')' {
    result = CSCP.make_unit val[0].loc
}
| '(' var_pat ')' {
    result = val[1]
}
| '(' var_pat ',' var_pat com_pats ')' {
    result = CSCP.make_tuple val[0].loc, [val[1], val[3]] + val[4]
}

# Braket: [ ... ]
| '[' ']' {
    result = CSCP.make_list val[0].loc, [],     nil
}
| '[' var_pat com_pats opt_last_pat ']' {
    result = CSCP.make_list val[0].loc, [val[1]] + val[2], val[3]
}


# Comma separated seq of pattern

com_pats:
  /* empty */   { result = [] }
| _com_pats     { result = val[0] }

_com_pats:
  ',' var_pat           { result = [val[1]] }
| ',' var_pat _com_pats { result = [val[1]] + val[2] }


# Last of collection pattern

opt_last_pat:
  /* empty */   { result = nil }
| '|' var_pat   { result = CSCP.make_variable val[1].loc, val[1].var_sym }


# Variable pattern

var_pat:
  ID opt_type_assert {
    result = CSCP.make_variable val[0].loc, val[0].sym, val[1]
}
| '(' infix_opr ')' {
    result = CSCP.make_variable val[1].loc, val[1].sym
}
| '_' opt_type_assert {
    result = CSCP.make_variable val[0].loc, WILDCARD,   val[1]
}

opt_type_assert:
  /* empty */   { result = nil }
| ':' ID        { result = val[1].sym }



#######################
####  Common Rule  ####
#######################

# General infix operator

infix_opr: norm_infix_opr | spec_infix_opr


# Normal infix operator

norm_infix_opr:
  '+' | '-' | '*' | '/'
| MOD    { result = LT.make_reserved_symbol(val[0].loc, 'mod') }
| POW    { result = LT.make_reserved_symbol(val[0].loc, 'pow') }
| '==' | '<>' | '<'  | '>'  | '<=' | '>='
| '^'  | '++'


# Special infix operator

spec_infix_opr: ',' | '|'

end
