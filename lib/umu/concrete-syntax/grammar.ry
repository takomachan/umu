class Umu::ConcreteSyntax::Parser


convert
	ISAQ	':ISA?'
end

prechigh
	left	POW
	left	'*' '/' MOD
	left	'+' '-' '^'
	left	'==' '<>' '<' '>' '<=' '>='
	left	'++'
	left	'>>'
	right	'<<'
	left	'|>'
	right	'<|'
	left	ISAQ
	left	'&&' '||'
preclow



rule

# Program

progs:
  prog				{ result = val[0] }
| prog ';;' progs	{ result = val[0] + val[2] }

prog:
  modu_decls	{ result = val[0] }
| expr			{ result = [val[0]] }



#########################################
####  Declaration (Module Language)  ####
#########################################

modu_decls:
  /* empty */			{ result = [] }
| modu_decl modu_decls	{ result = [val[0]] + val[1] }


modu_decl:
  STRUCTURE modu_pat '=' modu_expr {
	result = SCMD.make_structure val[0].loc, val[1], val[3]
}
| core_decl {
	result = SCMD.make_core val[0].loc, val[0]
}



########################################
####  Expression (Module Language)  ####
########################################

modu_expr:
  STRUCT '{' modu_decls '}' modu_where_decls {
	result = SCME.make_struct val[0].loc, val[2], val[4]
}
| modu_ident


# WHERE declaration (Module Language)

modu_where_decls:
  /* empty */				{ result = [] }
| WHERE '{' modu_decls '}'	{ result = val[2] }


# Identifier (Module Language)

modu_ident: modu_short_ident modu_short_idents {
	result = if val[1].empty?
				val[0]
			else
				SCME.make_long_identifier val[0].loc, val[0], val[1]
			end
}

modu_short_idents:
  /* empty */								{ result = [] }
| '::' modu_short_ident modu_short_idents	{ result = [val[1]] + val[2] }

modu_short_ident: ID {
	result = SCME.make_identifier(val[0].loc, val[0].sym)
}



#####################################
####  Pattern (Module Language)  ####
#####################################

modu_pat:
# Variable
  ID { result = SCMP.make_variable val[0].loc, val[0].sym }

# Structure
| STRUCT '{' stru_flds_pats '}' {
	result = SCMP.make_struct val[0].loc, val[2]
}


# Seq of structure fields pattern

stru_flds_pats:
  /* empty */		 			{ result = [] }
| stru_flds_pat stru_flds_pats	{ result = val[0] + val[1] }


# Structure fields pattern

stru_flds_pat: VAL _stru_flds_pat	{ result = val[1] }

_stru_flds_pat:
	atom_stru_fld_pat {
	result = [val[0]]
}
|	'(' atom_stru_fld_pat com_stru_fld_pats ')' {
	result = [val[1]] + val[2]
}


# Comma separated seq of structure field pattern

com_stru_fld_pats:
  /* empty */			{ result = [] }
| _com_stru_fld_pats	{ result = val[0] }

_com_stru_fld_pats:
  ',' atom_stru_fld_pat						{ result = [val[1]] }
| ',' atom_stru_fld_pat _com_stru_fld_pats	{ result = [val[1]] + val[2] }


# Atomic structure field pattern

atom_stru_fld_pat: var_pat opt_stru_var_pat {
	result = SCMP.make_struct_field val[0].loc, val[0].var_sym, val[1]
}

opt_stru_var_pat:
  /* empty */	{ result = nil }
| '->' var_pat	{ result = val[1].var_sym }



#######################################
####  Declaration (Core Language)  ####
#######################################

core_decls:
  /* empty */			{ result = [] }
| core_decl core_decls	{ result = [val[0]] + val[1] }

core_decl:
  VAL pat '=' expr outer_where_decls {
	result = SCCD.make_value(
					val[0].loc, val[1], val[3], val[4]
				)
}
| FUN var_pat '=' fun_body {
	hd_pat, tl_pats, expr, decls = val[3]

	result = SCCD.make_function(
		val[1].loc,
		SCCE.make_named_lambda(
			val[1].loc,
			[hd_pat] + tl_pats, expr, decls,
			val[1].var_sym
		)
	)
}
| FUN REC recu_bind recu_binds {
	result = SCCD.make_recursive val[0].loc, [val[2]] + val[3]
}
| ASSERT atom_expr expr {
	result = SCCD.make_assert val[0].loc, val[1], val[2]
}


# Recursive binding

recu_binds:
  /* empty */	{ result = [] }
| _recu_binds	{ result = val[0] }

_recu_binds:
  AND recu_bind				{ result = [val[1]] }
| AND recu_bind _recu_binds	{ result = [val[1]] + val[2] }

recu_bind: ID '=' fun_body {
	hd_pat, tl_pats, expr, decls = val[2]

	result = SCCD.make_recursive_function(
		val[1].loc,
		SCCE.make_named_lambda(
			val[0].loc,
			[hd_pat] + tl_pats, expr, decls,
			val[0].sym
		)
	)
}


# Function body

fun_body: pat pats '->' expr outer_where_decls {
	result = [val[0], val[1], val[3], val[4]]
}


# WHERE declaration (Core Language)

outer_where_decls:
  /* empty */				{ result = [] }
| WHERE '{' core_decls '}'	{ result = val[2] }


inner_where_decls:
  /* empty */				{ result = [] }
| WHERE core_decls			{ result = val[1] }


######################################
####  Expression (Core Language)  ####
######################################

expr:
  infix_expr
| IF if_rule elsif_rules ELSE expr {
	result = SCCE.make_if val[0].loc, val[1], val[2], val[4]
}
| COND atom_expr '{' cond_rule cond_rules opt_else_clause '}' {
	else_expr, else_decls = val[5]

	result = SCCE.make_cond(
				val[0].loc, val[1], val[3], val[4], else_expr, else_decls
			)
}
| CASE atom_expr '{' case_rule case_rules opt_else_clause '}' {
	else_expr, else_decls = val[5]

	result = SCCE.make_case(
				val[0].loc, val[1], val[3], val[4], else_expr, else_decls
			)
}
| LET '{' core_decls IN expr '}' {
	result = SCCE.make_let val[0].loc, val[2], val[4]
}

opt_else_clause:
  /* empty */						{ result = [nil,    []]     }
| ELSE '->' expr inner_where_decls	{ result = [val[2], val[3]] }


# If-expression Rule

elsif_rules:
  /* empty */		{ result = [] }
| _elsif_rules		{ result = val[0] }

_elsif_rules:
  ELSIF if_rule					{ result = [val[1]] }
| ELSIF if_rule _elsif_rules	{ result = [val[1]] + val[2] }

if_rule: atom_expr expr {
	result = SCCE.make_if_rule val[0].loc, val[0], val[1]
}


# Cond-expresson Rule

cond_rules:
  /* empty */	{ result = [] }
| _cond_rules	{ result = val[0] }

_cond_rules:
  '|' cond_rule				{ result = [val[1]] }
| '|' cond_rule _cond_rules	{ result = [val[1]] + val[2] }

cond_rule: expr '->' expr inner_where_decls {
	result = SCCE.make_cond_rule val[0].loc, val[0], val[2], val[3]
}


# Case-expresson Rule

case_rules:
  /* empty */	{ result = [] }
| _case_rules	{ result = val[0] }

_case_rules:
  '|' case_rule				{ result = [val[1]] }
| '|' case_rule _case_rules	{ result = [val[1]] + val[2] }

case_rule: case_rule_head '->' expr inner_where_decls {
	result = SCCE.make_case_rule val[0].loc, val[0], val[2], val[3]
}

case_rule_head:
  INTEGER	{ result = SCCE.make_case_rule_atom(
								val[0].loc, VC.make_integer(val[0].val)
							)
}
| FLOAT		{ result = SCCE.make_case_rule_atom(
								val[0].loc, VC.make_float(val[0].val)
							)
}
| STRING	{ result = SCCE.make_case_rule_atom(
								val[0].loc, VC.make_string(val[0].val)
							)
}
| SYMBOL	{ result = SCCE.make_case_rule_atom(
								val[0].loc, VC.make_symbol(val[0].val)
							)
}
| ID opt_pat {
  	result = SCCE.make_case_rule_datum val[0].loc, val[0].sym, val[1]
}
| '&' ID opt_pat {
  	result = SCCE.make_case_rule_class(
						val[0].loc,
						SCCE.make_identifier(val[1].loc, val[1].sym),
						val[2]
					)
}
| '[' var_pat opt_last_pat ']' {
	tail = if val[2]
				val[2]
			else
				SCCP.make_variable val[0].loc, WILDCARD, :Nil
			end

  	result = SCCE.make_case_rule_class(
						val[0].loc,
						SCCE.make_identifier(val[0].loc, :Cons),
						SCCP.make_tuple(val[0].loc, [val[1], tail])
					)
}
| '[' ']' {
  	result = SCCE.make_case_rule_class(
						val[0].loc,
						SCCE.make_identifier(val[0].loc, :Nil),
						SCCP.make_unit(val[0].loc)
					)
}


# Infix operator expression

infix_expr:
  send_expr
| _infix_expr {
	v = val[0]

	result = SCCE.make_infix v[1].loc, v[0], v[1].sym, v[2]
}

_infix_expr:
  infix_expr '+'  		infix_expr	{ result = val }
| infix_expr '-'  		infix_expr	{ result = val }
| infix_expr '^'  		infix_expr	{ result = val }
| infix_expr '*'  		infix_expr	{ result = val }
| infix_expr '/'  		infix_expr	{ result = val }
| infix_expr MOD  		infix_expr	{
	result = [
				val[0],
				LT.make_reserved_symbol(val[1].loc, 'mod'),
				val[2]
			]
}
| infix_expr POW  		infix_expr	{
	result = [
				val[0],
				LT.make_reserved_symbol(val[1].loc, 'pow'),
				val[2]
			]
}
| infix_expr '=='		infix_expr	{ result = val }
| infix_expr '<>'		infix_expr	{ result = val }
| infix_expr '<'		infix_expr	{ result = val }
| infix_expr '>'		infix_expr	{ result = val }
| infix_expr '<='		infix_expr	{ result = val }
| infix_expr '>='		infix_expr	{ result = val }
| infix_expr '++'		infix_expr	{ result = val }
| infix_expr '<<'		infix_expr	{ result = val }
| infix_expr '>>'		infix_expr	{ result = val }
| infix_expr '<|'		infix_expr	{ result = val }
| infix_expr '|>'		infix_expr	{ result = val }
| infix_expr ISAQ		infix_expr	{ result = val }
| infix_expr '&&'		infix_expr	{ result = val }
| infix_expr '||'		infix_expr	{ result = val }


# Send expression

send_expr: apply_expr messages {
	result = if val[1].empty?
					val[0]
				else
					hd_msg, *tl_msgs = val[1]

					SCCE.make_send val[0].loc, val[0], hd_msg, tl_msgs
				end
}

messages:
  /* empty */			{ result = [] }
| _messages				{ result = val[0] }

_messages:
  '.' message			{ result = [val[1]] }
| '.' message _messages	{ result = [val[1]] + val[2] }

message:
  INTEGER {
	result = SCCE.make_selector(
						val[0].loc, val[0].val
					)
}
| mess_ident atom_exprs {
	result = SCCE.make_method val[0].loc, val[0].sym, val[1]
}

mess_ident: ID | norm_infix_opr


# Apply expression

apply_expr: atom_expr atom_exprs {
	result = if val[1].empty?
					val[0]
				else
					hd_expr, *tl_exprs = val[1]

					SCCE.make_apply val[0].loc, val[0], hd_expr, tl_exprs
				end
}


# Atomic expression

atom_exprs:
  /* empty */			{ result = [] }
| atom_expr atom_exprs	{ result = [val[0]] + val[1] }

atom_expr:
# Identifier
  ident

# Constant
| INTEGER	{ result = SCCE.make_integer	val[0].loc, val[0].val }
| FLOAT		{ result = SCCE.make_float		val[0].loc, val[0].val }
| STRING	{ result = SCCE.make_string		val[0].loc, val[0].val }
| SYMBOL	{ result = SCCE.make_symbol		val[0].loc, val[0].sym }
| __FILE__ {
	loc = val[0].loc

	result = SCCE.make_string loc, loc.file_name
}
| __LINE__ {
	loc = val[0].loc

	result = SCCE.make_integer loc, loc.line_num
}

# Braket: ( ... )
| '(' ')' {
	result = SCCE.make_unit val[0].loc
}
| '(' expr ')' {
	result = val[1]
}
| '(' infix_opr expr ')' {
	result = SCCE.make_prefix val[1].loc, val[1].sym, val[2]
}
| '(' expr ',' expr com_exprs ')' {
	result = SCCE.make_tuple val[0].loc, [val[1], val[3]] + val[4]
}
| '(' expr ';' expr sem_exprs ')' {
	result = SCCE.make_sequence val[0].loc, [val[1], val[3]] + val[4]
}
| '&(' ID ')' {
	result = SCCE.make_class val[1].loc, val[1].sym
}
| '&(' ID '.' mess_ident ')' {
	result = SCCE.make_class_method val[1].loc, val[1].sym, val[3].sym
}
| '&(' ID '$' mess_ident ')' {
	result = SCCE.make_instance_method val[1].loc, val[1].sym, val[3].sym
}

# Braket: [ ... ]
| '[' ']' {
	result = SCCE.make_list val[0].loc, [],                nil }
| '[' expr com_exprs opt_last_expr ']' {
	result = SCCE.make_list val[0].loc, [val[1]] + val[2], val[3]
}

# Braket: { ... }
| '{' pat pats '->' expr inner_where_decls '}' {
	result = SCCE.make_lambda val[0].loc, [val[1]] + val[2], val[4], val[5]
}


# Identifier

ident: short_ident short_idents {
	result = if val[1].empty?
				val[0]
			else
				SCCE.make_long_identifier val[0].loc, val[0], val[1]
			end
}

short_idents:
  /* empty */					{ result = [] }
| '::' short_ident short_idents	{ result = [val[1]] + val[2] }

short_ident:
  ID						{
  	result = SCCE.make_identifier val[0].loc, val[0].sym
}
| '(' infix_opr ')'	{
	result = SCCE.make_identifier val[1].loc, val[1].sym
}


# Semi-colon separated seq of expresseion

sem_exprs:
  /* empty */	{ result = [] }
| _sem_exprs	{ result = val[0] }

_sem_exprs:
  ';' expr				{ result = [val[1]] }
| ';' expr _sem_exprs	{ result = [val[1]] + val[2] }


# Comma separated seq of expresseion

com_exprs:
  /* empty */	{ result = [] }
| _com_exprs	{ result = val[0] }

_com_exprs:
  ',' expr				{ result = [val[1]] }
| ',' expr _com_exprs	{ result = [val[1]] + val[2] }


# Last of collection expression

opt_last_expr:
  /* empty */	{ result = nil }
| '|' expr		{ result = val[1] }



###################################
####  Pattern (Core Language)  ####
###################################

pats:
  /* empty */	{ result = [] }
| pat pats		{ result = [val[0]] + val[1] }


opt_pat:
  /* empty */	{ result = nil }
| pat			{ result = val[0] }


pat:
# Variable
  var_pat

# Braket: ( ... )
| '(' ')' {
	result = SCCP.make_unit val[0].loc
}
| '(' var_pat ')' {
	result = val[1]
}
| '(' var_pat ',' var_pat com_pats ')' {
	result = SCCP.make_tuple val[0].loc, [val[1], val[3]] + val[4]
}

# Braket: [ ... ]
| '[' ']' {
	result = SCCP.make_list val[0].loc, [],     nil
}
| '[' var_pat com_pats opt_last_pat ']' {
	result = SCCP.make_list val[0].loc, [val[1]] + val[2], val[3]
}


# Comma separated seq of pattern

com_pats:
  /* empty */	{ result = [] }
| _com_pats		{ result = val[0] }

_com_pats:
  ',' var_pat			{ result = [val[1]] }
| ',' var_pat _com_pats	{ result = [val[1]] + val[2] }


# Last of collection pattern

opt_last_pat:
  /* empty */	{ result = nil }
| '|' var_pat	{ result = SCCP.make_variable val[1].loc, val[1].var_sym }


# Variable pattern

var_pat:
  ID opt_type_assert						{
  	result = SCCP.make_variable val[0].loc, val[0].sym, val[1]
}
| '(' infix_opr ')'	{
	result = SCCP.make_variable val[1].loc, val[1].sym
}
| '_' opt_type_assert						{
	result = SCCP.make_variable val[0].loc, WILDCARD,   val[1]
}

opt_type_assert:
  /* empty */	{ result = nil }
| ':' ID		{ result = val[1].sym }



#######################
####  Common Rule  ####
#######################

# General infix operator

infix_opr: norm_infix_opr | spec_infix_opr


# Normal infix operator

norm_infix_opr:
  '+' | '-' | '*' | '/'
| MOD	 { result = LT.make_reserved_symbol(val[0].loc, 'mod') }
| POW	 { result = LT.make_reserved_symbol(val[0].loc, 'pow') }
| '==' | '<>' | '<'  | '>'  | '<=' | '>='
| '<|' | '|>' | '<<' | '>>'
| '^'  |'++'


# Special infix operator

spec_infix_opr: ',' | '|'

end
