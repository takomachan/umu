# coding: utf-8
# frozen_string_literal: true

class Umu::ConcreteSyntax::Parser


convert
    KIND_OF ":'KIND-OF?'"
end

prechigh
    left    POW
    left    '*' '/' MOD
    left    '+' '-' '^'
    left    '==' '<>' '<' '>' '<=' '>=' '<=>'
    left    '++'
    left    KIND_OF
    left    '&&' '||'
preclow



rule

# Statement

stmts:
  stmt              { result = val[0] }
| stmt ';;' stmts   { result = val[0] + val[2] }

stmt:
  modu_decls    { result = val[0] }
| expr          { result = [val[0]] }



#########################################
####  Declaration (Module Language)  ####
#########################################

modu_decls:
  /* empty */           { result = [] }
| modu_decl modu_decls  { result = [val[0]] + val[1] }


modu_decl:
  STRUCTURE ID '=' modu_expr modu_where_decls {
    kw, id, _, expr, decls = val

    var_pat = CSMP.make_variable id.loc, id.sym

    result = CSMD.make_structure kw.loc, var_pat, expr, decls
}
| IMPORT modu_long_id opt_import_body {
    kw, id, opt_body = val

    result = CSMD.make_import kw.loc, id, opt_body
}
| core_decl {
    result = CSMD.make_core val[0].loc, val[0]
}


# WHERE declaration (Module Language)

modu_where_decls:
  /* empty */               { result = [] }
| WHERE '{' modu_decls '}'  { result = val[2] }


# Optional body of import declaration

opt_import_body:
  /* empty */           { result = nil }
| '{' import_flds '}'   { result = val[1] }


# Import field

import_flds:
  /* empty */               { result = [] }
| import_fld import_flds    { result = [val[0]] + val[1] }

import_fld:
  VAL _import_fld {
    kw, fld = val

    result = CSMD.make_value_fields_of_import     kw.loc,  fld
}
| FUN _import_fld {
    kw, fld = val

    result = CSMD.make_function_fields_of_import  kw.loc,  fld
}
| STRUCTURE _import_fld {
    kw, fld = val

    result = CSMD.make_structure_fields_of_import kw.loc,  fld
}

_import_fld:
  atom_import_fld {
    result = [val[0]]
}
|  '(' atom_import_fld com_import_flds ')' {
    _, fld, flds, _  = val

    result = [fld] + flds
}


# Comma separated seq of import field

com_import_flds:
  /* empty */       { result = [] }
| _com_import_flds  { result = val[0] }

_com_import_flds:
  ',' atom_import_fld                   { result = [val[1]] }
| ',' atom_import_fld _com_import_flds  { result = [val[1]] + val[2] }


# Atomic import field

atom_import_fld: var_pat opt_import_var {
    pat, opt_var = val

    result = [
        CSME.make_identifier(pat.loc, pat.var_sym),
        pat.opt_type_sym,
        opt_var
    ]
}

opt_import_var:
  /* empty */       { result = nil }
| '=' modu_long_id  { result = val[1] }



########################################
####  Expression (Module Language)  ####
########################################

modu_expr:
  STRUCT '{' modu_decls '}' {
    kw, _, decls, _ = val

    result = CSME.make_struct kw.loc, decls
}
| modu_long_id { result = val[0] }


# Module long identifire

modu_long_id: modu_path ID {
    path, id = val

    last_id = CSME.make_identifier id.loc, id.sym

    result = if path.empty?
                last_id
            else
                head_id, *tail_ids = path

                CSME.make_long_identifier(
                            head_id.loc, head_id, tail_ids + [last_id]
                        )
            end
}

modu_path:
  /* empty */           { result = [] }
| MODULE_DIR modu_path  {
    dir, path = val

    result = [CSME.make_identifier(dir.loc, dir.sym)] + path
}



#######################################
####  Declaration (Core Language)  ####
#######################################

core_decls:
  /* empty */ {
    result = CSCD.make_empty_seq_of_declaration
}
| core_decl core_decls {
    result = CSCD.make_seq_of_declaration([val[0]]) + val[1]
}

core_decl:
  VAL pat '=' expr outer_where_decls {
    kw, pat, _, expr, decls = val

    result = CSCD.make_value kw.loc, pat, expr, decls
}
| FUN var_pat '=' fun_body {
    kw, fun_pat, _, body         = val
    hd_pat, tl_pats, expr, decls = body

    result = CSCD.make_function(
        kw.loc,
        CSCE.make_named_lambda(
            fun_pat.loc,
            [hd_pat] + tl_pats, expr, decls,
            fun_pat.var_sym
        )
    )
}
| FUN REC recu_bind recu_binds {
    kw, _, bind, binds = val

    result = CSCD.make_recursive kw.loc, [bind] + binds
}
| ASSERT expr '->' expr {
    kw, head_expr, _, body_expr = val

    result = CSCD.make_assert kw.loc, head_expr, body_expr
}


# Recursive binding

recu_binds:
  /* empty */   { result = [] }
| _recu_binds   { result = val[0] }

_recu_binds:
  AND recu_bind             { result = [val[1]] }
| AND recu_bind _recu_binds { result = [val[1]] + val[2] }

recu_bind: ID '=' fun_body {
    id, _, body = val
    hd_pat, tl_pats, expr, decls = body

    result = CSCD.make_recursive_function(
        id.loc,
        CSCE.make_named_lambda(
            id.loc,
            [hd_pat] + tl_pats, expr, decls,
            id.sym
        )
    )
}


# Function body

fun_body: pat pats '->' expr outer_where_decls {
    pat, pats, _, expr, decls = val

    result = [pat, pats, expr, decls]
}


# WHERE declaration (Core Language)

outer_where_decls:
  /* empty */ {
    result = CSCD.make_empty_seq_of_declaration
}
| WHERE '{' core_decls '}' {
    _, _, result, _ = val
}


inner_where_decls:
  /* empty */ {
    result = CSCD.make_empty_seq_of_declaration
}
| WHERE core_decls {
    _, result = val
}


######################################
####  Expression (Core Language)  ####
######################################

opt_expr:
  /* empty */   { result = nil }
| expr          { result = val[0] }

expr:
  pipe_expr
| IF if_rule elsif_rules ELSE expr {
    kw, rule, rules, _, expr = val

    result = CSCE.make_if kw.loc, rule, rules, expr
}
| COND expr OF '{' opt_vert cond_rule cond_rules '}' {
    kw, expr, _, _, _, rule, rules_with_clause, _ = val
    rules, else_expr, else_decls               = rules_with_clause

    result = CSCE.make_cond(
                kw.loc, expr, rule, rules, else_expr, else_decls
            )
}
| CASE expr OF '{' opt_vert case_rule case_rules '}' {
    kw, expr, _, _, _, rule, rules_with_clause, _ = val
    rules, else_expr, else_decls               = rules_with_clause

    result = CSCE.make_case(
                kw.loc, expr, rule, rules, else_expr, else_decls
            )
}
| LET '{' core_decls IN expr '}' {
    kw, _, decls, _, expr, _ = val

    result = CSCE.make_let kw.loc, decls, expr
}

opt_vert: /* empty */ | '|'


# If-expression Rule

elsif_rules:
  /* empty */       { result = [] }
| _elsif_rules      { result = val[0] }

_elsif_rules:
  ELSIF if_rule                 { result = [val[1]] }
| ELSIF if_rule _elsif_rules    { result = [val[1]] + val[2] }

if_rule: expr THEN expr {
    head_expr, _, body_expr = val

    result = CSCE.make_if_rule head_expr.loc, head_expr, body_expr
}


# Cond-expresson Rule

cond_rules:
  /* empty */   {
    result = [[],     nil,  CSCD.make_empty_seq_of_declaration]
}
| _cond_rules   {
    result = [val[0], nil,  CSCD.make_empty_seq_of_declaration]
}
| ELSE '->' expr inner_where_decls {
    _, _, expr, decls = val

    result = [[],     expr, decls]
}
| _cond_rules ELSE '->' expr inner_where_decls {
    rules, _, _, expr, decls = val

    result = [rules,  expr, decls]
}

_cond_rules:
  '|' cond_rule             { result = [val[1]] }
| '|' cond_rule _cond_rules { result = [val[1]] + val[2] }

cond_rule: expr '->' expr inner_where_decls {
    head_expr, _, body_expr, decls = val

    result = CSCE.make_cond_rule(
                     head_expr.loc, head_expr, body_expr, decls
                )
}


# Case-expresson Rule

case_rules:
  /* empty */   {
    result = [[],     nil,  CSCD.make_empty_seq_of_declaration]
}
| _case_rules   {
    result = [val[0], nil,  CSCD.make_empty_seq_of_declaration]
}
| ELSE '->' expr inner_where_decls {
    _, _, expr, decls = val

    result = [[],     expr, decls]
}
| _case_rules ELSE '->' expr inner_where_decls {
    rules, _, _, expr, decls = val

    result = [rules,  expr, decls]
}

_case_rules:
  '|' case_rule             { result = [val[1]] }
| '|' case_rule _case_rules { result = [val[1]] + val[2] }

case_rule: case_rule_head '->' expr inner_where_decls {
    head, _, body_expr, decls = val

    result = CSCE.make_case_rule head.loc, head, body_expr, decls
}

case_rule_head:
  INT       { result = CSCE.make_case_rule_atom(
                                val[0].loc, VC.make_integer(val[0].val)
                            )
}
| REAL      { result = CSCE.make_case_rule_atom(
                                val[0].loc, VC.make_real(val[0].val)
                            )
}
| STRING    { result = CSCE.make_case_rule_atom(
                                val[0].loc, VC.make_string(val[0].val)
                            )
}
| SYMBOL    { result = CSCE.make_case_rule_atom(
                                val[0].loc, VC.make_symbol(val[0].val)
                            )
}
| ID opt_pat {
    id, opt_pat = val

    result = CSCE.make_case_rule_datum id.loc, id.sym, opt_pat
}
| '&' ID opt_pat {
    kw, id, opt_pat = val

    result = CSCE.make_case_rule_class(
                        kw.loc,
                        CSCE.make_identifier(id.loc, id.sym),
                        opt_pat
                    )
}
| '[' ']' {
    bb, _ = val

    result = CSCE.make_case_rule_class(
                        bb.loc,
                        CSCE.make_identifier(bb.loc, :Nil),
                        nil,
                        CSCE.make_identifier(bb.loc, :List)
                    )
}
| '[' var_pat opt_last_pat ']' {
    bb, var_pat, opt_last_pat, _ = val

    tail = if opt_last_pat
                opt_last_pat
            else
                CSCP.make_variable bb.loc, WILDCARD, :Nil
            end

    result = CSCE.make_case_rule_class(
                        bb.loc,
                        CSCE.make_identifier(bb.loc, :Cons),
                        CSCP.make_tuple(bb.loc, [var_pat, tail]),
                        CSCE.make_identifier(bb.loc, :List)
                    )
}


# Pipe expression

pipe_expr:
  comp_expr {
    result = val[0]
}
| comp_expr '|>' comp_expr pipel_exprs {
    lhs, op, hd_rhs, tl_rhs = val

    result = CSCE.make_pipe_left lhs.loc, lhs, op.sym, hd_rhs, tl_rhs
}
| comp_expr '<|' comp_expr piper_exprs {
    lhs, op, hd_rhs, tl_rhs = val

    result = CSCE.make_pipe_right lhs.loc, lhs, op.sym, hd_rhs, tl_rhs
}

pipel_exprs:
  /* empty */                 { result = [] }
| '|>' comp_expr pipel_exprs  { result = [val[1]] + val[2] }

piper_exprs:
  /* empty */                 { result = [] }
| '<|' comp_expr piper_exprs  { result = [val[1]] + val[2] }



# Composite expression

comp_expr:
  resrv_infix_expr {
    result = val[0]
}
| resrv_infix_expr '>>' resrv_infix_expr compl_exprs {
    lhs, op, hd_rhs, tl_rhs = val

    result = CSCE.make_comp_left lhs.loc, lhs, op.sym, hd_rhs, tl_rhs
}
| resrv_infix_expr '<<' resrv_infix_expr compr_exprs {
    lhs, op, hd_rhs, tl_rhs = val

    result = CSCE.make_comp_right lhs.loc, lhs, op.sym, hd_rhs, tl_rhs
}

compl_exprs:
  /* empty */                        { result = [] }
| '>>' resrv_infix_expr compl_exprs  { result = [val[1]] + val[2] }

compr_exprs:
  /* empty */                        { result = [] }
| '<<' resrv_infix_expr compr_exprs  { result = [val[1]] + val[2] }



# Reserved infix operator expression

resrv_infix_expr:
  redef_infix_expr
| resrv_infix_expr KIND_OF ID {
    lhs, op, id = val

    ty_ident = CSCE.make_identifier id.loc, id.sym

    result = CSCE.make_kindof  lhs.loc, lhs, op.sym, ty_ident
}
| resrv_infix_expr '&&' resrv_infix_expr {
    lhs, op, rhs = val

    result = CSCE.make_andalso lhs.loc, lhs, op.sym, rhs
}
| resrv_infix_expr '||' resrv_infix_expr {
    lhs, op, rhs = val

    result = CSCE.make_orelse  lhs.loc, lhs, op.sym, rhs
}


# Redefinable infix operator expression

redef_infix_expr:
  send_expr
| _redef_infix_expr {
    lhs, op, rhs = val[0]

    result = CSCE.make_infix lhs.loc, lhs, op.sym, rhs
}

_redef_infix_expr:
  redef_infix_expr '+'    redef_infix_expr  { result = val }
| redef_infix_expr '-'    redef_infix_expr  { result = val }
| redef_infix_expr '^'    redef_infix_expr  { result = val }
| redef_infix_expr '*'    redef_infix_expr  { result = val }
| redef_infix_expr '/'    redef_infix_expr  { result = val }
| redef_infix_expr MOD    redef_infix_expr  {
    result = [
                val[0],
                LT.make_reserved_symbol(val[1].loc, 'mod'),
                val[2]
            ]
}
| redef_infix_expr POW    redef_infix_expr  {
    result = [
                val[0],
                LT.make_reserved_symbol(val[1].loc, 'pow'),
                val[2]
            ]
}
| redef_infix_expr '=='    redef_infix_expr { result = val }
| redef_infix_expr '<>'    redef_infix_expr { result = val }
| redef_infix_expr '<'     redef_infix_expr { result = val }
| redef_infix_expr '>'     redef_infix_expr { result = val }
| redef_infix_expr '<='    redef_infix_expr { result = val }
| redef_infix_expr '>='    redef_infix_expr { result = val }
| redef_infix_expr '<=>'   redef_infix_expr { result = val }
| redef_infix_expr '++'    redef_infix_expr { result = val }


# Send expression

send_expr: apply_expr messages {
    expr, msgs = val

    result = if msgs.empty?
                    expr
                else
                    hd_msg, *tl_msgs = msgs

                    CSCE.make_send expr.loc, expr, hd_msg, tl_msgs
                end
}

messages:
  /* empty */           { result = [] }
| _messages             { result = val[0] }

_messages:
  message           { result = [val[0]] }
| message _messages { result = [val[0]] + val[1] }

message:
  '$' INT {
    kw, int = val

    result = CSCE.make_number_selector kw.loc, int.val
}
| SEL {
    result = CSCE.make_label_selector  val[0].loc, val[0].sym
}
| '$(' named_fld named_flds ')' {
    bb, fld, flds, _ = val

    result = CSCE.make_modifier bb.loc, [fld] + flds
}
| '.' '(' ID atom_exprs ')' {
    kw, _, msg, exprs, _ = val

    result = CSCE.make_message kw.loc, msg.sym, exprs
}
| MSG atom_exprs {
    msg, exprs = val

    result = CSCE.make_message msg.loc, msg.sym, exprs
}
| '.' '(' norm_infix_opr atom_exprs ')' {
    kw, _, opr, exprs, _ = val

    result = CSCE.make_message kw.loc, opr.sym, exprs
}
| '.' norm_infix_opr atom_exprs {
    kw, opr, exprs = val

    result = CSCE.make_message kw.loc, opr.sym, exprs
}
| '.' '(' named_fld named_flds ')' {
    kw, _, fld, flds, _ = val

    result = CSCE.make_keyword_message kw.loc, fld, flds
}
| '.' '[' expr com_exprs ']' {
    kw, _, expr, exprs, _ = val

    result = CSCE.make_apply_message kw.loc, expr, exprs
}


# Apply expression

apply_expr: atom_expr atom_exprs {
    expr, exprs = val

    result = if exprs.empty?
                    expr
                else
                    hd_expr, *tl_exprs = exprs

                    CSCE.make_apply expr.loc, expr, hd_expr, tl_exprs
                end
}


# Atomic expression

atom_exprs:
  /* empty */           { result = [] }
| atom_expr atom_exprs  { result = [val[0]] + val[1] }

atom_expr:
# Identifier
  ID {
    result = CSCE.make_identifier val[0].loc, val[0].sym
}
| '(' infix_opr ')' {
    bb, opr, _ = val

    result = CSCE.make_identifier bb.loc, opr.sym
}
| MODULE_DIR path ID {
    dir, path, id = val

    head_id = CSCE.make_identifier dir.loc, dir.sym
    last_id = CSCE.make_identifier id.loc,  id.sym

    result = CSCE.make_long_identifier(
                        dir.loc, head_id, path + [last_id]
                    )
}
| MODULE_DIR path '(' infix_opr ')' {
    dir, path, _, id, _ = val

    head_id = CSCE.make_identifier dir.loc, dir.sym
    last_id = CSCE.make_identifier id.loc,  id.sym

    result = CSCE.make_long_identifier(
                        dir.loc, head_id, path + [last_id]
                    )
}
| '&' ID {
    result = CSCE.make_class val[1].loc, val[1].sym
}

# Constant
| INT       { result = CSCE.make_integer    val[0].loc, val[0].val }
| REAL      { result = CSCE.make_real       val[0].loc, val[0].val }
| STRING    { result = CSCE.make_string     val[0].loc, val[0].val }
| SYMBOL    { result = CSCE.make_symbol     val[0].loc, val[0].sym }
| __FILE__ {
    loc = val[0].loc

    result = CSCE.make_string loc, loc.file_name
}
| __LINE__ {
    loc = val[0].loc

    result = CSCE.make_integer loc, loc.line_num
}

# Braket: ( ... )
| '(' ')' {
    result = CSCE.make_unit val[0].loc
}
| '(' expr ')' {
    result = val[1]
}
| '(' infix_opr expr ')' {
    bb, opr, expr = val

    result = CSCE.make_prefix bb.loc, opr.sym, expr
}
| '(' expr ',' expr com_exprs ')' {
    bb, expr1, _, expr2, exprs, _ = val

    result = CSCE.make_tuple bb.loc, [expr1, expr2] + exprs
}
| '(' named_fld named_fld named_flds ')' {
    bb, fld1, fld2, flds, _ = val

    result = CSCE.make_named_tuple bb.loc, [fld1, fld2] + flds
}
| '(' expr ';' expr sem_exprs ')' {
    bb, expr1, _, expr2, exprs, _ = val

    result = CSCE.make_sequential  bb.loc, [expr1, expr2] + exprs
}
| '&(' ID ')' {
    bb, msg, _ = val

    result = CSCE.make_functionalized_message(
                    bb.loc,
                    CSCE.make_identifier(msg.loc, msg.sym)
                )
}
| '&(' ID MSG ')' {
    bb, klass, msg, _ = val

    result = CSCE.make_functionalized_message(
                    bb.loc,
                    CSCE.make_identifier(msg.loc, msg.sym),
                    CSCE.make_identifier(klass.loc, klass.sym)
                )
}
| '&(' norm_infix_opr ')' {
    bb, msg, _ = val

    result = CSCE.make_functionalized_message(
                    bb.loc,
                    CSCE.make_identifier(msg.loc, msg.sym)
                )
}

# Braket: [ ... ]
| '[' ']' {
    result = CSCE.make_list val[0].loc, [],                nil
}
| '[' expr com_exprs opt_last_expr ']' {
    bb, expr, exprs, opt_expr, _ = val

    result = CSCE.make_list bb.loc, [expr] + exprs, opt_expr
}
| '[' expr opt_com_expr '..' expr ']' {
    bb, fst_expr, opt_snd_expr, _, lst_expr, _ = val

    result = CSCE.make_interval bb.loc, fst_expr, opt_snd_expr, lst_expr
}
| '[' '|' expr com_exprs '|' qualifiers ']' {
    bbr, bba, expr, exprs, _, qual, _ = val

    expr = if exprs.empty?
                expr
            else
                CSCE.make_tuple bba.loc, [expr] + exprs
            end

    result = CSCE.make_comprehension bbr.loc, expr, qual
}
| '[' '|' named_fld named_fld named_flds '|' qualifiers  ']' {
    bbr, bba, fld1, fld2, flds, _, qual, _ = val

    expr = CSCE.make_named_tuple bba.loc, [fld1, fld2] + flds

    result = CSCE.make_comprehension bbr.loc, expr, qual
}

# Braket: { ... }
| '{' pat pats '->' expr inner_where_decls '}' {
    bb, pat, pats, _, expr, decls, _ = val

    result = CSCE.make_lambda bb.loc, [pat] + pats, expr, decls
}


# Module path (Core Language)

path:
  /* empty */     { result = [] }
| MODULE_DIR path {
    dir, path = val

    result = [CSCE.make_identifier(dir.loc, dir.sym)] + path
}


# Semi-colon separated seq of expresseion

sem_exprs:
  /* empty */   { result = [] }
| _sem_exprs    { result = val[0] }

_sem_exprs:
  ';' expr              { result = [val[1]] }
| ';' expr _sem_exprs   { result = [val[1]] + val[2] }


# Comma separated seq of expresseion

com_exprs:
  /* empty */   { result = [] }
| _com_exprs    { result = val[0] }

_com_exprs:
  ',' expr              { result = [val[1]] }
| ',' expr _com_exprs   { result = [val[1]] + val[2] }


# Optional comma separated expression

opt_com_expr:
  /* empty */   { result = nil }
| ',' expr      { result = val[1] }


# Last of collection expression

opt_last_expr:
  /* empty */   { result = nil }
| '|' expr      { result = val[1] }


# Seq of named field

named_flds:
  /* empty */   { result = [] }
| _named_flds   { result = val[0] }

_named_flds:
  named_fld             { result = [val[0]] }
| named_fld _named_flds { result = [val[0]] + val[1] }

named_fld: LABEL opt_expr {
    lab, opt_expr = val

    result = [CSCE.make_named_tuple_label(lab.loc, lab.sym), opt_expr]
}


# Qualifiers for List Comprehension

qualifiers:
  /* empty */           { result = [] }
| qualifier             { result = [val[0]] }
| qualifier _qualifiers { result = [val[0]] + val[1] }

_qualifiers:
  qualifier             { result = [val[0]] }
| qualifier _qualifiers { result = [val[0]] + val[1] }

qualifier:
  VAL pat '<-' expr {
    kw, pat, _, expr = val

    result = CSCE.make_generator kw.loc, pat, expr
}
| IF expr {
    kw, expr = val

    result = CSCE.make_guard kw.loc, expr
}



###################################
####  Pattern (Core Language)  ####
###################################

pats:
  /* empty */   { result = [] }
| pat pats      { result = [val[0]] + val[1] }


opt_pat:
  /* empty */   { result = nil }
| pat           { result = val[0] }


pat:
# Variable
  var_pat

# Braket: ( ... )
| '(' ')' {
    bb, _ = val

    result = CSCP.make_unit bb.loc
}
| '(' var_pat ')' {
    _, result, _ = val
}
| '(' var_pat ',' var_pat com_pats ')' {
    bb, pat1, _, pat2, pats, _ = val

    result = CSCP.make_tuple bb.loc, [pat1, pat2] + pats
}
| '(' named_fld_pat named_fld_pats ')' {
    bb, pat, pats, _ = val

    result = CSCP.make_named_tuple bb.loc, [pat] + pats
}

# Braket: [ ... ]
| '[' ']' {
    bb, _ = val

    result = CSCP.make_list bb.loc, [],     nil
}
| '[' var_pat com_pats opt_last_pat ']' {
    bb, pat, pats, opt_pat, _ = val

    result = CSCP.make_list bb.loc, [pat] + pats, opt_pat
}


# Comma separated seq of pattern

com_pats:
  /* empty */   { result = [] }
| _com_pats     { result = val[0] }

_com_pats:
  ',' var_pat           { result = [val[1]] }
| ',' var_pat _com_pats { result = [val[1]] + val[2] }


# Seq of named field pattern

named_fld_pats:
  /* empty */     { result = [] }
| _named_fld_pats { result = val[0] }

_named_fld_pats:
  named_fld_pat                 { result = [val[0]] }
| named_fld_pat _named_fld_pats { result = [val[0]] + val[1] }

named_fld_pat: LABEL opt_var_pat {
    lab, opt_pat = val

    var_pat = if opt_pat
                  opt_pat
              else
                  CSCP.make_variable lab.loc, lab.sym
              end

    result = [
        CSCP.make_named_tuple_label(lab.loc, lab.sym),
        var_pat
    ]
}


# Last of collection pattern

opt_last_pat:
  /* empty */   { result = nil }
| '|' var_pat   { result = val[1] }


# Variable pattern

opt_var_pat:
  /* empty */   { result = nil }
| var_pat       { result = val[0] }

var_pat:
  ID opt_type_assert {
    id, opt_type = val

    result = CSCP.make_variable id.loc,  id.sym,   opt_type
}
| '(' infix_opr ')' {
    _, opr, _ = val

    result = CSCP.make_variable opr.loc, opr.sym
}
| '_' opt_type_assert {
    wc, opt_type = val

    result = CSCP.make_variable wc.loc,  WILDCARD, opt_type
}

opt_type_assert:
  /* empty */   { result = nil }
| ':' ID        { result = val[1].sym }



#######################
####  Common Rule  ####
#######################

# General infix operator

infix_opr: norm_infix_opr | spec_infix_opr


# Normal infix operator

norm_infix_opr:
  '+' | '-' | '*' | '/'
| MOD    { result = LT.make_reserved_symbol(val[0].loc, 'mod') }
| POW    { result = LT.make_reserved_symbol(val[0].loc, 'pow') }
| '==' | '<>' | '<'  | '>'  | '<=' | '>=' | '<=>'
| '^'  | '++'


# Special infix operator

spec_infix_opr: ',' | '|'

end
