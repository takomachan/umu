FILES = [
    'version.rb',
    'commander.rb',
    'commander/entry.rb',
    'commander/option.rb',
    'commander/subcommand.rb',
    'commander/prelude.rb',
    'lexical.rb',
    'lexical/lexer.rb',
    'lexical/lexer/abstract.rb',
    'lexical/lexer/separator.rb',
    'lexical/lexer/comment.rb',
    'lexical/lexer/token.rb',
    'lexical/lexer/string.rb',
    'lexical/lexer/entry.rb',
    'lexical/token.rb',
    'lexical/token/abstraction.rb',
    'lexical/token/separator.rb',
    'lexical/token/token.rb',
    'concrete-syntax.rb',
    'concrete-syntax/parser.rb',
    'concrete-syntax/abstract.rb',
    'concrete-syntax/module.rb',
    'concrete-syntax/module/abstract.rb',
    'concrete-syntax/module/declaration.rb',
    'concrete-syntax/module/expression.rb',
    'concrete-syntax/module/expression/abstract.rb',
    'concrete-syntax/module/expression/struct.rb',
    'concrete-syntax/module/expression/identifier.rb',
    'concrete-syntax/module/pattern.rb',
    'concrete-syntax/module/pattern/abstract.rb',
    'concrete-syntax/module/pattern/variable.rb',
    'concrete-syntax/core.rb',
    'concrete-syntax/core/declaration.rb',
    'concrete-syntax/core/declaration/abstract.rb',
    'concrete-syntax/core/declaration/assert.rb',
    'concrete-syntax/core/declaration/value.rb',
    'concrete-syntax/core/declaration/function.rb',
    'concrete-syntax/core/declaration/recursive.rb',
    'concrete-syntax/core/declaration/seq-of-declaration.rb',
    'concrete-syntax/core/expression.rb',
    'concrete-syntax/core/expression/abstract.rb',
    'concrete-syntax/core/expression/unit.rb',
    'concrete-syntax/core/expression/unary.rb',
    'concrete-syntax/core/expression/unary/abstract.rb',
    'concrete-syntax/core/expression/unary/atom.rb',
    'concrete-syntax/core/expression/unary/atom/abstract.rb',
    'concrete-syntax/core/expression/unary/atom/number.rb',
    'concrete-syntax/core/expression/unary/atom/string.rb',
    'concrete-syntax/core/expression/unary/atom/symbol.rb',
    'concrete-syntax/core/expression/unary/prefix.rb',
    'concrete-syntax/core/expression/unary/identifier.rb',
    'concrete-syntax/core/expression/unary/class.rb',
    'concrete-syntax/core/expression/unary/message.rb',
    'concrete-syntax/core/expression/unary/delay.rb',
    'concrete-syntax/core/expression/unary/force.rb',
    'concrete-syntax/core/expression/unary/container.rb',
    'concrete-syntax/core/expression/unary/container/abstract.rb',
    'concrete-syntax/core/expression/unary/container/tuple.rb',
    'concrete-syntax/core/expression/unary/container/named-tuple.rb',
    'concrete-syntax/core/expression/unary/container/list.rb',
    'concrete-syntax/core/expression/unary/container/comprehension.rb',
    'concrete-syntax/core/expression/unary/container/sequence.rb',
    'concrete-syntax/core/expression/binary.rb',
    'concrete-syntax/core/expression/binary/abstract.rb',
    'concrete-syntax/core/expression/binary/infix.rb',
    'concrete-syntax/core/expression/binary/infix/abstraction.rb',
    'concrete-syntax/core/expression/binary/infix/infix.rb',
    'concrete-syntax/core/expression/binary/infix/pipe.rb',
    'concrete-syntax/core/expression/binary/infix/composite.rb',
    'concrete-syntax/core/expression/binary/apply.rb',
    'concrete-syntax/core/expression/binary/product.rb',
    'concrete-syntax/core/expression/binary/send.rb',
    'concrete-syntax/core/expression/nary.rb',
    'concrete-syntax/core/expression/nary/rule.rb',
    'concrete-syntax/core/expression/nary/if.rb',
    'concrete-syntax/core/expression/nary/branch.rb',
    'concrete-syntax/core/expression/nary/branch/abstract.rb',
    'concrete-syntax/core/expression/nary/branch/cond.rb',
    'concrete-syntax/core/expression/nary/branch/case.rb',
    'concrete-syntax/core/expression/nary/lambda.rb',
    'concrete-syntax/core/expression/nary/let.rb',
    'concrete-syntax/core/expression/nary/interval.rb',
    'concrete-syntax/core/pattern.rb',
    'concrete-syntax/core/pattern/result.rb',
    'concrete-syntax/core/pattern/abstract.rb',
    'concrete-syntax/core/pattern/elem-of-container.rb',
    'concrete-syntax/core/pattern/unit.rb',
    'concrete-syntax/core/pattern/container.rb',
    'concrete-syntax/core/pattern/container/abstract.rb',
    'concrete-syntax/core/pattern/container/product.rb',
    'concrete-syntax/core/pattern/container/list.rb',
    'abstract-syntax.rb',
    'abstract-syntax/result.rb',
    'abstract-syntax/abstract.rb',
    'abstract-syntax/core.rb',
    'abstract-syntax/core/declaration.rb',
    'abstract-syntax/core/declaration/abstract.rb',
    'abstract-syntax/core/declaration/simple.rb',
    'abstract-syntax/core/declaration/mutual-recursive.rb',
    'abstract-syntax/core/declaration/import.rb',
    'abstract-syntax/core/declaration/seq-of-declaration.rb',
    'abstract-syntax/core/expression.rb',
    'abstract-syntax/core/expression/abstract.rb',
    'abstract-syntax/core/expression/unit.rb',
    'abstract-syntax/core/expression/unary.rb',
    'abstract-syntax/core/expression/unary/abstract.rb',
    'abstract-syntax/core/expression/unary/atom.rb',
    'abstract-syntax/core/expression/unary/atom/abstract.rb',
    'abstract-syntax/core/expression/unary/atom/bool.rb',
    'abstract-syntax/core/expression/unary/atom/number.rb',
    'abstract-syntax/core/expression/unary/atom/string.rb',
    'abstract-syntax/core/expression/unary/atom/symbol.rb',
    'abstract-syntax/core/expression/unary/identifier.rb',
    'abstract-syntax/core/expression/unary/class.rb',
    'abstract-syntax/core/expression/unary/delay.rb',
    'abstract-syntax/core/expression/unary/force.rb',
    'abstract-syntax/core/expression/unary/container.rb',
    'abstract-syntax/core/expression/unary/container/abstraction.rb',
    'abstract-syntax/core/expression/unary/container/tuple.rb',
    'abstract-syntax/core/expression/unary/container/named-tuple.rb',
    'abstract-syntax/core/expression/unary/container/struct.rb',
    'abstract-syntax/core/expression/unary/container/list.rb',
    'abstract-syntax/core/expression/unary/raise.rb',
    'abstract-syntax/core/expression/binary.rb',
    'abstract-syntax/core/expression/binary/abstract.rb',
    'abstract-syntax/core/expression/binary/kind-of.rb',
    'abstract-syntax/core/expression/binary/apply.rb',
    'abstract-syntax/core/expression/binary/pipe.rb',
    'abstract-syntax/core/expression/binary/product.rb',
    'abstract-syntax/core/expression/binary/send.rb',
    'abstract-syntax/core/expression/nary.rb',
    'abstract-syntax/core/expression/nary/if.rb',
    'abstract-syntax/core/expression/nary/switch.rb',
    'abstract-syntax/core/expression/nary/lambda.rb',
    'abstract-syntax/core/expression/nary/let.rb',
    'abstract-syntax/core/expression/nary/interval.rb',
    'value.rb',
    'value/core.rb',
    'value/core/top.rb',
    'value/core/class.rb',
    'value/core/device.rb',
    'value/core/struct.rb',
    'value/core/opaque.rb',
    'value/core/object.rb',
    'value/core/unit.rb',
    'value/core/atom.rb',
    'value/core/atom/abstract.rb',
    'value/core/atom/bool.rb',
    'value/core/atom/number.rb',
    'value/core/atom/number/abstract.rb',
    'value/core/atom/number/int.rb',
    'value/core/atom/number/float.rb',
    'value/core/atom/string.rb',
    'value/core/atom/symbol.rb',
    'value/core/product.rb',
    'value/core/product/abstract.rb',
    'value/core/product/tuple.rb',
    'value/core/product/named-tuple.rb',
    'value/core/union.rb',
    'value/core/union/abstract.rb',
    'value/core/union/datum.rb',
    'value/core/union/option.rb',
    'value/core/morph.rb',
    'value/core/morph/abstract.rb',
    'value/core/morph/interval.rb',
    'value/core/morph/list.rb',
    'value/core/function.rb',
    'value/core/reference.rb',
    'value/core/suspend.rb',
    'value/core/io.rb',
    'value/core/dir.rb',
    'value/core/validate-type.rb',
    'environment.rb',
    'environment/preference.rb',
    'environment/tracer.rb',
    'environment/tracer/tracer.rb',
    'environment/tracer/stack.rb',
    'environment/context.rb',
    'environment/context/type.rb',
    'environment/context/type/signature.rb',
    'environment/context/type/signature/class.rb',
    'environment/context/type/signature/set-of-class.rb',
    'environment/context/type/signature/method.rb',
    'environment/context/type/entry.rb',
    'environment/context/value.rb',
    'environment/context/value/target.rb',
    'environment/context/value/abstract.rb',
    'environment/context/value/initial.rb',
    'environment/context/value/entry.rb',
    'environment/entry.rb',
    'common.rb',
    'common/constant.rb',
    'common/assertion.rb',
    'common/exception.rb',
    'common/abstraction.rb',
    'common/escape.rb',
    'common/location.rb',
    'common/pretty-print.rb'
]

PROJECT = 'umu'

MAIN = format '../../exe/%s', PROJECT

RACC_SRC_FILES = ['concrete-syntax/grammar.ry']

TAR_FILE = format '%s-%s.tar', PROJECT, Time.now.strftime('%Y%m%d')



task :default => :help


task :help do
    puts "[Making Rules]"
    puts "        run : Interact interpreter"
    puts
    puts "         wc : Count source files"
    puts "      files : List source files"
    puts
    puts "      clean : Remove all automatically generated files"
    puts "        tar : Create tar archive"
    puts ""
end


task :run => [MAIN] do
    sh format '%s -i -d', MAIN
end


task :wc => FILES + RACC_SRC_FILES do
    sh format 'wc %s', (FILES + RACC_SRC_FILES).join(' ')
end


task :files => FILES do
    FILES.each do |file|
        puts file
    end
end


task :clean do
    sh format 'rm -f %s', [TAR_FILE].join(' ')
end


task :tar => FILES + RACC_SRC_FILES + ['Rakefile'] do |t|
    sh format 'tar cvf %s %s', TAR_FILE, t.prerequisites.join(' ')
end


file MAIN => FILES + ['concrete-syntax/grammar.tab.rb']


file 'concrete-syntax/grammar.tab.rb' => ['concrete-syntax/grammar.ry'] do
    |t|

    sh format 'racc %s', t.prerequisites[0]
end
