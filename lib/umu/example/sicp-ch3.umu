#############################
########  CHAPTER 3  ########
#############################

;; print "\n\nCHAPTER 3"
;;



#####################
#### SECTION 3.3 ####
#####################

;; print "\n\nSECTION 3.3"
;;



#######################
#### SECTION 3.3.3 ####
#######################

;; print "\n\nSECTION 3.3.3"
;;

###		assoc : Symbol -> [(Symbol, 'a)] -> Option (Symbol, 'a)
fun rec assoc = key records -> cond records {
  empty?	-> NONE
  else		-> if (key == fst x)
					Some x
			   else
					assoc key xs
			where val [x|xs] = records
}

### lookup1 = Symbol -> <TABLE> [(Symbol, 'a)] -> Option 'a
fun lookup1 = key table -> let {
	val opt-record = assoc key (val-of table)
in
	if (Some? opt-record)
		Some (snd (val-of opt-record))
	else
		NONE
}

fun make-table = records -> Datum @Table records


;; val t1 = make-table [(@a, 1), (@b, 2), (@c, 3)]
(#
	a:	1
	b:	2
	c:	3
#)

;; t1
# -> Table [(@a, 1), (@b, 2), (@c, 3)]

;; lookup1 @b t1
# -> Some 2

;; lookup1 @d t1
# -> NONE
;;


#### two-dimensional ####

(### lookup2 = Symbol ->
				Symbol ->
				<TABLE> [(Symbol, [(Symbol, 'a)])] ->
				Option 'a
###)
fun lookup2 = key1 key2 table -> let {
	val opt-subtable = assoc key1 (val-of table)
in
	if (Some? opt-subtable) let {
		val opt-record = assoc key2 (snd (val-of opt-subtable))
	in
		if (Some? opt-record)
			Some (snd (val-of opt-record))
		else
			NONE
	} else
		NONE
}


;; val t2 = make-table [
				(@math,    [(@"+", 43), (@"-", 45), (@"*", 42)]),
				(@letters, [(@a, 97),   (@b, 98)])
			]
(#
	math:
		+: 43
		-: 45
		*: 42
	letters:
		a: 97
		b: 98
#)

;; t2
# -> Table [(@math, [(@+, 43), (@-, 45), (@*, 42)]), (@letters, [(@a, 97), (@b, 98)])]

;; lookup2 @math @"-" t2
# -> Some 45

;; lookup2 @letters @a t2
# -> Some 97

;; lookup2 @nath @"-" t2
# -> NONE

;; lookup2 @math @"/" t2
# -> NONE
;;


#### local tables ####

fun make-table' = records -> let {
	val local-table = Datum @Table records

	fun lookup = key1 key2 -> let {
		val opt-subtable = assoc key1 (val-of local-table)
	in
		if (Some? opt-subtable) let {
			val opt-record = assoc key2 (snd (val-of opt-subtable))
		in
			if (Some? opt-record)
				Some (snd (val-of opt-record))
			else
				NONE
		} else
			NONE
	}

	fun dispatch = m -> case m {
	  @lookup-proc	-> lookup
	  else			-> abort ("Unknown operation -- TABLE: " ^ inspect m)
	}
in
	dispatch
}

val operation-table = make-table' [
						(@math,    [(@"+", 43), (@"-", 45), (@"*", 42)]),
						(@letters, [(@a, 97),   (@b, 98)])
					]

val get = operation-table @lookup-proc


;; operation-table
# -> #<dispatch: ....>

;; get
# -> #<lookup: ....>

;; get @math @"-"
# -> &Some 45

;; get @letters @a
# -> &Some 97

;; get @nath @"-"
# -> &None ()

;; get @math @"/"
# -> &None ()
;;
