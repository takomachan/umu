(#
    データベース・システム概論 第三販, 1984, C.J.Date
#)


structure UAS = Umu::Assert


# 3 データ構造および対応する演算子 -- p65

# 3.2 関係型の方法 -- p66

structure 納入業者表 = struct {
    fun 納入業者番号 = 桁 : Product -> 桁$1
    fun 業者名       = 桁 : Product -> 桁$2
    fun 状態コード   = 桁 : Product -> 桁$3
    fun 所在地       = 桁 : Product -> 桁$4

    val 桁リスト = map { 桁 -> (
            納入業者番号: 納入業者番号 桁,
            業者名:       業者名       桁,
            状態コード:   状態コード   桁,
            所在地:       所在地       桁
        )
    } [
    #    納入業者番号  業者名     状態コード  所在地
    #------------------------------------------------------
        (@S1,         "スミス",   20,        "ロンドン"),
        (@S2,         "ジョン",   10,        "パリ"),
        (@S3,         "ブラーク", 30,        "パリ")
    ]
}


structure 部品表 = struct {
    fun 部品番号 = 桁 : Product -> 桁$1
    fun 部品名   = 桁 : Product -> 桁$2
    fun 色       = 桁 : Product -> 桁$3
    fun 重量     = 桁 : Product -> 桁$4
    fun 納入場所 = 桁 : Product -> 桁$5

    val 桁リスト = map { 桁 -> (
            部品番号: 部品番号 桁,
            部品名:   部品名   桁,
            色:       色       桁,
            重量:     重量     桁,
            納入場所: 納入場所 桁
        )
    } [
    #    部品番号  部品名    色   重量  納入場所
    #------------------------------------------------
        (@P1,     "ナット", "赤", 12,  "ロンドン"),
        (@P2,     "ボルト", "緑", 17,  "パリ"),
        (@P3,     "ねじ",   "青", 17,  "ローマ"),
        (@P4,     "ねじ",   "赤", 14,  "ロンドン")
    ]
}


structure 出荷表 = struct {
    fun 納入業者番号 = 桁 : Tuple -> 桁$1
    fun 部品番号     = 桁 : Tuple -> 桁$2
    fun 出荷量       = 桁 : Tuple -> 桁$3

    val 桁リスト = map { 桁 -> (
            納入業者番号: 納入業者番号 桁,
            部品番号:     部品番号     桁,
            出荷量:       出荷量       桁
        )
    } [
    #    納入業者番号  部品番号  出荷量
    #------------------------------------
        (@S1,          @P1,      300),
        (@S1,          @P2,      200),
        (@S1,          @P3,      400),
        (@S2,          @P1,      300),
        (@S2,          @P2,      400),
        (@S2,          @P2,      200)
    ]
}

;;



# 3.5 高水準演算子 -- p75

# 3.5.1 Find CITY for supplier S1.
# 3.5.1 納入業者 S1 に対して所在地を見つけること。

print "#### 3.5.1 ####" ;;
pp [|所在地|
    val (納入業者番号, _, _, 所在地) <- 納入業者表::桁リスト
    if 納入業者番号 == @S1
] ;;
# --> ["ロンドン"]
nl () ;;


# 3.5.2 パリにある納入業者に対して 納入業者番号と状態コードを見つけること。

print "#### 3.5.2 ####" ;;
pp [|納入業者番号:, 状態コード:|
    val (納入業者番号, _, 状態コード, 所在地) <- 納入業者表::桁リスト
    if 所在地 == "パリ"
] ;;
# --> [(納入業者番号: @S2, 状態コード: 10), (納入業者番号: @S3, 状態コード: 30)]
nl () ;;


# 3.5.3 納入業者 S1 から納入される部品に対して部品名を見つけること。

print "#### 3.5.3 ####" ;;
pp [|部品名|
    val (納入業者番号, 出荷表の部品番号, _) <- 出荷表::桁リスト
    if 納入業者番号 == @S1

    val (部品表の部品番号, 部品名, _, _, _) <- 部品表::桁リスト
    if 部品表の部品番号 == 出荷表の部品番号
] ;;
# --> ["ナット", "ボルト", "ねじ"]
nl () ;;


# 3.5.4 納入される各部品に対して、部品番号およびその部品を納入しているすべての
#       都市の名前を見つけること。

print "#### 3.5.4 ####" ;;
pp [|部品番号:, 都市名: 所在地|
    val (出荷表の納入業者番号, 部品番号, _)  <- 出荷表::桁リスト
    val (業者表の納入業者番号, _, _, 所在地) <- 納入業者表::桁リスト

    if 業者表の納入業者番号 == 出荷表の納入業者番号
] ;;
# --> [
#     (部品番号: @P1, 都市名: "ロンドン"),
#     (部品番号: @P2, 都市名: "ロンドン"),
#     (部品番号: @P3, 都市名: "ロンドン"),
#     (部品番号: @P1, 都市名: "パリ"),
#     (部品番号: @P2, 都市名: "パリ"),
#     (部品番号: @P2, 都市名: "パリ")
# ]
nl () ;;
