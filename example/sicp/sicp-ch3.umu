#### 3 Modularity, Objects, and State
#### 3 標準部品化力、オブジェクトおよび状態 -- p127

;; print "\n\nCHAPTER 3"
;;



#### 3.1 Assignment and Local State
#### 3.1 代入と局所状態 -- p127

;; print "\n\nSECTION 3.1"
;;



#### 3.1.1 Local State Variables
#### 3.1.1 局所状態変数 -- p128

;; print "\n\nSECTION 3.1.1"
;;



#### 3.1.2 The Benefits of Introducing Assignment
#### 3.1.2 代入を取り入れた利点 -- p131

;; print "\n\nSECTION 3.1.2"
;;



#### 3.1.3 The Costs of Introducing Assignment
#### 3.1.3 代入を取り入れた代価 -- p134

;; print "\n\nSECTION 3.1.3"
;;



#### 3.2 The Environment Model of Evaluation
#### 3.2 評価の環境モデル -- p138

;; print "\n\nSECTION 3.2"
;;



#### 3.2.1 The Rules for Evaluation
#### 3.2.1 評価の規則 -- p138

;; print "\n\nSECTION 3.2.1"
;;



#### 3.2.2 Applying Simple Procedures
#### 3.2.2 単純な手続きの作用 -- p140

;; print "\n\nSECTION 3.2.2"
;;



#### 3.2.3 Frames as the Repository of Local State
#### 3.2.3 局所状態の入れ物としてのフレーム -- p142

;; print "\n\nSECTION 3.2.3"
;;



#### 3.2.4 Internal Definitions
#### 3.2.4 内部定義 -- p145

;; print "\n\nSECTION 3.2.4"
;;



#### 3.3 Modeling with Mutable Data
#### 3.3 可変データでのモデル化 -- p147

;; print "\n\nSECTION 3.3"
;;



#### 3.3.1 Mutable List Structure
#### 3.3.1 可変リスト構造 -- p147

;; print "\n\nSECTION 3.3.1"
;;



#### 3.3.2 Representing Queues
#### 3.3.2 キューの表現 -- p153

;; print "\n\nSECTION 3.3.2"
;;



#### 3.3.3 Representing Tables
#### 3.3.3 表の表現 -- p156

;; print "\n\nSECTION 3.3.3"
;;

###     assoc : Symbol -> [(Symbol, 'a)] -> Option (Symbol, 'a)
fun rec assoc = key records -> case records of {
| []     -> NONE
| [x|xs] -> if key == fst x then Some x
                            else assoc key xs
}

### lookup1 = Symbol -> <TABLE> [(Symbol, 'a)] -> Option 'a
fun lookup1 = key table -> let {
    val opt-record = assoc key (val-of table)
in
    if Some? opt-record then Some (snd (val-of opt-record))
                        else NONE
}

fun make-table = records -> Datum @Table records


;; val t1 = make-table [(@a, 1), (@b, 2), (@c, 3)]
(#
    a:  1
    b:  2
    c:  3
#)

;; t1
# -> Table [(@a, 1), (@b, 2), (@c, 3)]

;; lookup1 @b t1
# -> Some 2

;; lookup1 @d t1
# -> NONE
;;


#### two-dimensional ####

(### lookup2 = Symbol ->
                Symbol ->
                <TABLE> [(Symbol, [(Symbol, 'a)])] ->
                Option 'a
###)
fun lookup2 = key1 key2 table -> let {
    val opt-subtable = assoc key1 (val-of table)
in
    if Some? opt-subtable then let {
        val opt-record = assoc key2 (snd (val-of opt-subtable))
    in
        if Some? opt-record then Some (snd (val-of opt-record))
                            else NONE
    } else NONE
}


;; val t2 = make-table [
                (@math,    [(@"+", 43), (@"-", 45), (@"*", 42)]),
                (@letters, [(@a, 97),   (@b, 98)])
            ]
(#
    math:
        +: 43
        -: 45
        *: 42
    letters:
        a: 97
        b: 98
#)

;; t2
# -> Table [(@math, [(@+, 43), (@-, 45), (@*, 42)]), (@letters, [(@a, 97), (@b, 98)])]

;; lookup2 @math @"-" t2
# -> Some 45

;; lookup2 @letters @a t2
# -> Some 97

;; lookup2 @nath @"-" t2
# -> NONE

;; lookup2 @math @"/" t2
# -> NONE
;;


#### local tables ####

fun make-table' = records -> let {
    val local-table = Datum @Table records

    fun lookup = key1 key2 -> let {
        val opt-subtable = assoc key1 (val-of local-table)
    in
        if Some? opt-subtable then let {
            val opt-record = assoc key2 (snd (val-of opt-subtable))
        in
            if Some? opt-record then Some (snd (val-of opt-record))
                                else NONE
        } else NONE
    }

    fun dispatch = m -> case m of {
    | @lookup-proc -> lookup
    else           -> panic! <| "Unknown operation -- TABLE: " ^ inspect m
    }
in
    dispatch
}

val operation-table = make-table' [
                        (@math,    [(@"+", 43), (@"-", 45), (@"*", 42)]),
                        (@letters, [(@a, 97),   (@b, 98)])
                    ]

val get = operation-table @lookup-proc


;; operation-table
# -> #<dispatch: ....>

;; get
# -> #<lookup: ....>

;; get @math @"-"
# -> &Some 45

;; get @letters @a
# -> &Some 97

;; get @nath @"-"
# -> &None ()

;; get @math @"/"
# -> &None ()
;;
