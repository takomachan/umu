(#
FUNCTIONAL PROGRAMMING, Applivation and Implementation,
    PETER HENDERSON, University of Newcastle, 1980,
    8.1 Delayed evaluation, p215-218

関数型プログラミング,
    PETER HENDERSON 著, 杉藤芳雄・二木厚吉 訳, 1985年
    8.1 遅延評価, p233-237
#)



# 1. Eager evaluation

# sum-ints 9
# ^^^^^^^^^^
# sum (integers-between (1, 9))
#      ^^^^^^^^^^^^^^^^^^^^^^^
# sum [1 | integers-between (2, 9)]
#          ^^^^^^^^^^^^^^^^^^^^^^^
# sum [1, 2 | integers-between (3, 9)]
#             ^^^^^^^^^^^^^^^^^^^^^^^
# sum [1, 2, 3 | integers-between (4, 9)]
#        :       ^^^^^^^^^^^^^^^^^^^^^^^
#        :
# sum [1, 2, 3, ..., 9 | integers-between (10, 9)]
#                        ^^^^^^^^^^^^^^^^^^^^^^^^
# sum [1, 2, 3, ..., 9 | []]
#                        ^^
# sum [1, 2, 3, ..., 9]
# ^^^^^^^^^^^^^^^^^^^^^
# 1 + sum [2, 3, 4, ..., 9]
#     ^^^^^^^^^^^^^^^^^^^^^
# 1 + 2 + sum [3, 4, 5, ..., 9]
#         ^^^^^^^^^^^^^^^^^^^^^
# 1 + 2 + 3 + sum [4, 5, 6, ..., 9]
#        :    ^^^^^^^^^^^^^^^^^^^^^
#        :
# 1 + 2 + 3 + ... + 9 + sum []
#                       ^^^^^^
# 1 + 2 + 3 + ... + 9 + 0
# ^^^^^^^^^^^^^^^^^^^^^^^
# 45


fun rec integers-between = (m : Int, n : Int) -> (
    if m > n then
        []
    else 
        [ m | integers-between (m + 1, n) ]
)

fun rec sum = xs : List -> case xs of {
  | []      -> 0
  | [x|xs'] -> x + sum xs'
}

fun sum-ints = n -> sum (integers-between (1, n))
;;


sum-ints 9
;; # => 45



# 2. Delayed evaluation

#
# sum-ints 9
# ^^^^^^^^^^
# sum (integers-between (1, 9))
#     ^^^^^^^^^^^^^^^^^^^^^^^^^
# sum &[1 | integers-between (2, 9)]
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# 1 + sum (integers-between (2, 9))
#         ^^^^^^^^^^^^^^^^^^^^^^^^^
# 1 + sum &[2 | integers-between (3, 9)]
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# 1 + 2 + sum (integers-between (3, 9))
# ~~~~~       ^^^^^^^^^^^^^^^^^^^^^^^^^
# 3 + sum &[3 | integers-between (4, 9)]
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# 3 + 3 + sum (integers-between (4, 9))
# ~~~~~  :    ^^^^^^^^^^^^^^^^^^^^^^^^^
#        :
# 36 + sum &[9 | integers-between (10, 9)]
#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# 36 + 9 + sum (integers-between (10, 9))
# ^^^^^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^
# 45 + sum &[]
#          ^^^
# 45 + 0
# ^^^^^^
# 45



# 2.1 By cell stream
fun rec integers-between' = (m : Int, n : Int) -> (
    if m > n then
        &[]
    else
        &[ m | integers-between' (m + 1, n) ]
)

fun rec sum' = xs : Stream -> (
    case xs of {
      | %[]                      -> 0
      | %[x : Int| xs' : Stream] -> x + sum' xs'
    }
)

fun sum-ints' = n -> sum' (integers-between' (1, n))
;;


sum-ints' 9
;; # => 45



# 2.2 By memorized stream
fun rec integers-between'' = (m : Int, n : Int) -> (
    if m > n then
        &{}
    else
        &{ m | integers-between'' (m + 1, n) }
)

fun sum-ints'' = n -> sum' (integers-between'' (1, n))
;;


sum-ints'' 9
;; # => 45



# 3. Infinite stream (1)

fun rec first = (k : Int, xs : Stream) -> (
    if k <= 0 then
        []
    else
        case xs of {
          | %[]                     -> []
          | %[x : Int|xs' : Stream] -> [ x | first (k - 1, xs') ]
        }
)

fun rec integers-from = m : Int -> &[m | integers-from (m + 1)]
;;


integers-from 3
;; # ==> #CellStream< ... >
first (5, it)
;; # ==> [3, 4, 5, 6, 7]



# 4. Infinite stream (2)

fun first-sums = k : Int -> (
    first (k, sums (0, integers-from 1))
) where {
    fun rec sums = (a : Int, xs : Stream) -> let {
        val %[x|xs'] = xs
    in
        &[ a + x | sums (a + x, xs') ]
    }
}
;;


first-sums 5
;; # ==> [1, 3, 6, 10, 15]

