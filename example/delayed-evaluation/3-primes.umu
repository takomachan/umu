(#
See: 新世代プログラミング, 淵一博＋黒川利明 編著, 1986年
        4 関数型言語KRC, 4.5.1 エラトステネスのふるい, p42
または
    bit 1983年10月号(通巻176号)
    新世代プログラミング ④ 新しいプログラミング・スタイルと言語
    (2) 関数型プログラミング言語KRCを中心として, 井田哲雄 著, p108
#)



import Umu::Stream { fun take = take-to-list }



# 1. By cell stream

fun primes = () -> (
    shift <| generate 2
) where {
    fun rec generate = n : Int -> &[ n | generate (n + 1) ]

    fun rec shift = xs : Stream -> let {
        val (x, xs') = xs.dest!
    in
        &[ x | shift <| filter x xs' ]
    } where {
        fun rec filter = (p : Int) (xs : Stream) -> (
            case xs.dest of {
              | &None ->
                    &[]
              | &Some (x : Int, xs' : Stream) ->
                    if x mod p == 0 then filter p xs'
                                    else &[ x | filter p xs' ]
            }
        )
    }
}
;;


primes ()
;; # ==> #CellStream< ... >
take 10 it
;; # ==> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]



# 2. By memorized stream

fun primes' = () -> (
    shift <| generate 2
) where {
    fun rec generate = n : Int -> &{ n | generate (n + 1) }

    fun rec shift = xs : Stream -> let {
        val (x, xs') = xs.dest!
    in
        &{ x | shift <| filter x xs' }
    } where {
        fun rec filter = (p : Int) (xs : Stream) -> (
            case xs.dest of {
              | &None ->
                    &{}
              | &Some (x : Int, xs' : Stream) ->
                    if x mod p == 0 then filter p xs'
                                    else &{ x | filter p xs' }
            }
        )
    }
}
;;


primes' ()
;; # ==> #CellStream< ... >
take 10 it
;; # ==> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]



# 3. Comparison between cell stream and memorized stream

val xs = primes ()
;; # ==> #CellStream< ... >
take 20 xs
;; # ==> [2, 3, 5, 7, ... ]     # Wait for seconds, 1st
take 20 xs
;; # ==> [2, 3, 5, 7, ... ]     # Wait for seconds, 2nd
take 20 xs
;; # ==> [2, 3, 5, 7, ... ]     # Wait for seconds, 3rd

val ys = primes' ()
;; # ==> #MemoStream< ... >
take 20 ys
;; # ==> [2, 3, 5, 7, ... ]     # Wait for seconds, 1st
take 20 ys
;; # ==> [2, 3, 5, 7, ... ]     # Without waiting!!, 2nd
take 20 ys
;; # ==> [2, 3, 5, 7, ... ]     # Without waiting!!, 3rd

