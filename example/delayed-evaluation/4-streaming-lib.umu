# Streaming Library

(#

    +----------+    +-----------+    +----------+
    | Producer |--->| Processor |--->| Consumer |
    +----------+    +-----------+    +----------+

   (from-by 3 10 |>  filter odd?
                 |>  map to-s      |>  take-to-list 5)

   # ==> ["3", "13", "23", "33", "43"]


   read () |> map { s -> "- " ^ s  } |> write

   aaa [Enter]
   - aaa
   bbb [Enter]
   - bbb
   [Ctrl]+[d]

#)



structure Stream = struct {
    #### 1. Producer

    # 1.1 From integer

    fun from = m : Int ->
        __from-to-by__ (m, NONE, NONE)

    fun from-to = (m : Int) (n : Int) ->
        __from-to-by__ (m, Some n, NONE)

    fun from-by = (m : Int) (d : Int) ->
        __from-to-by__ (m, NONE, Some d)

    fun from-to-by = (m : Int) (n : Int) (d : Int) ->
        __from-to-by__ (m, Some n, Some d)


    # 1.2 From morph

    fun rec list = xs : Morph -> &{
        case xs of {
          | %[]      -> &[]
          | %[x|xs'] -> &[ x | list xs' ]
        }
    }


    # 1.3 From input device

    fun rec read = () -> &{
        case gets () of {
          | &None      -> &[]
          | &Some line -> &[ line | read () ]
        }
    }



    ####  2. Processor

    fun rec filter = (f : Fun) (xs : Stream) -> &{
        case xs of {
          | %[]      -> &[]
          | %[x|xs'] -> if f x then &[ x | filter f xs' ]
                               else filter f xs'
        }
    }

    fun rec map = (f : Fun) (xs : Stream) -> &{
        case xs of {
          | %[]      -> &[]
          | %[x|xs'] -> &[ f x | map f xs' ]
        }
    }

                                          # The xs must be finite stream
    fun rec append = (xs : Stream) (ys : Stream) -> &{
        case xs of {
          | %[]      -> ys
          | %[x|xs'] -> &[ x | append xs' ys ]
        }
    }

                                        # The f must return finite stream
    fun rec concat-map = (f : Fun) (xs : Stream) -> &{
        case xs of {
          | %[]      -> &[]
          | %[x|xs'] -> append (f x) (concat-map f xs')
        }
    }

    fun rec take = (n : Int) (xs : Stream) -> &{
        if n <= 0 then
            &[]
        else
            case xs of {
              | %[]      -> &[]
              | %[x|xs'] -> &[ x | take (n - 1) xs' ]
            }
    }



    #### 3. Consumer

    # 3.1 General purpose (only finite stream)

    fun rec foldr = a (f : Fun) (xs : Stream) ->
        case xs of {
          | %[]      -> a
          | %[x|xs'] -> f x (foldr a f xs')
        }

    fun rec foldl = a (f : Fun) (xs : Stream) ->
        case xs of {
          | %[]      -> a
          | %[x|xs'] -> foldl (f x a) f xs'
        }


    # 3.2 To list

    fun rec take-to-list = (n : Int) (xs : Stream) ->
        if n <= 0 then
            []
        else
            case xs of {
              | %[]      -> []
              | %[x|xs'] -> [ x | take-to-list (n - 1) xs' ]
            }

                                                    # Only finite stream
    fun to-list = xs : Stream -> foldr [] (|) xs


    # 3.3 To number (only finite stream)

    fun count = xs : Stream -> foldl 0 { _ n -> n + 1 } xs

    fun sum = xs : Stream -> foldl 0 (+) xs

    fun avg = xs : Stream -> let {
        val (sum, num) = foldl (0, 1) __avg__ xs
    in
        to-f sum / to-f num
    } where {
        fun __avg__ = x (sum, num) -> (sum + x, num + 1)
    }


    # 3.4 To output device

    fun write = xs : Stream -> foldl () __write__ xs
    where {
        fun __write__ = line _ -> print line
    }
} where {
    fun rec __from-to-by__ = (
        current  : Int,
        opt-stop : Option,
        opt-step : Option
    ) -> &[
        current
    |
        let {
            val step = case opt-step of {
                         | &None      -> 1
                         | &Some step -> step
                       }

            val next = current + step

            val stop? = case opt-stop of {
                          | &None      -> FALSE
                          | &Some stop -> next > stop
                        }
        in
            if stop?
                then &[]
                else __from-to-by__ (next, opt-stop, opt-step)
        }
    ]
}



#### EXAMPLES ####

import Stream


# 1. Basic

;; (from-by 3 10 |>  filter odd?
                 |>  map to-s      |>  take-to-list 5)
# ==> ["3", "13", "23", "33", "43"]



# 2. "What's the sum of the first 10 natural number
#                                   whose square value is divisible by 5?"
# See: Functional programming with Ruby, Arnau Sanchez, 2012
#       https://qiita.com/JuanitoFatas/items/68dbdc53a816568700e8
#
# 2.「二乗して5で割り切れる自然数について、最初の10個の合計はいくつ？」
# See: Rubyによる関数型プログラミング
#       http://xtmlab.com/misc/FPwithRuby.html 

;; from 1 |> filter { x -> x pow 2 mod 5 == 0 } |> take 10 |> foldl 0 (+)
# ==> 275

