(#
 Implementation of REYNOLDS's Definional Interpretor

 1971年に公開されたレイノルズ氏による意味定義用インタプリタを
 Umuで実装してみた


 Reynolds, J. C. :
   Definitional Interpretors
   for Higher-Oreder Programming Languages,
   Higer-Order and Symbolic Computation, 11, 363-397 (1998),
   Proceedings of 25h ACM National Conference, 1971, pp. 717-740

 木村泉, 米澤明憲 :
   第9章 算法表現(プログラム)の意味論,
   算法表現論, 岩波講座情報科学12, 岩波書店, 1982

       上記論文のInterpreter I と II を元にして
       プログラミング言語の古典的な意味論を解説している
       なお、現在のUmu言語処理系(インタプリタ)は
       この Interpreter II を元に設計した


 Exanple execution :
 実行例 :
    $ ./umu -i example/reynolds.umu
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    [CONSTANT]
    <SRC> : 100
    <EXP> : Const 100
    -> <VAL> : Integer 100
            :
            :
            :  (running tests)
            :
            :
    0001> run-I [ADD, 3, 4]
          ^^^^^^^^^^^^^^^^^
    <SRC> : [@ADD, 3, 4]
    <EXP> : Appl (Appl (Var @ADD, Const 3), Const 4)
    -> <VAL> : Integer 7
    
    -> Integer 7 : Datum
    0002>
#)



######## Error ########

structure ERROR = struct {
    # failure       : String -> 'a -> ()
    fun failure     = msg x -> error ("Assertion Failure",  msg, x)

    # syntax        : String -> 'a -> ()
    fun syntax      = msg x -> error ("Syntax Error",       msg, x)

    # name          : String -> 'a -> ()
    fun name        = msg x -> error ("Name Error",         msg, x)

    # application   : String -> 'a -> ()
    fun application = msg x -> error ("Application Error",  msg, x)

    # type'         : String -> 'a -> ()
    fun type'       = msg x -> error ("Type Error",         msg, x)
} where {
    fun error = (category, msg, x) ->
        panic! ("[" ^ category ^ "] " ^ msg ^ inspect x)
}



(######## Expression (Abstract Syntax Tree, AST) ########

<EXP> = <CONST> + <VAR> + <APPL> + <LAMBDA> + <COND> + <LETREC>

<APPL>   = [opr: <EXP>, opnd: <EXP>]
<LAMBDA> = [fp: <VAR>, body: <EXP>]
<COND>   = [prem: <EXP>, conc: <EXP>, altr: <EXP>]
<LETREC> = [dvar: <VAR>, dexp: <LAMBDA>, body: <EXP>]

#########################################################)

structure EXP = struct {
    #### Constructor ####

    # mk-const  : Int -> <CONST>
    fun mk-const  = x : Int -> Datum @Const x

    # mk-var    : Symbol -> <VAR>
    fun mk-var    = x : Symbol -> Datum @Var x

    # mk-appl   : (<EXP>, <EXP>) -> <APPL>
    fun mk-appl   = (opr : Datum, opnd : Datum) ->
                        Datum @Appl (opr, opnd)

    # mk-lambda : (<VAR>, <EXP>) -> <LAMBDA>
    fun mk-lambda = (fp : Datum, body : Datum) ->
                        Datum @Lambda (fp, body)

    # mk-cond   : (<EXP>, <EXP>, <EXP>) -> <COND>
    fun mk-cond   = (prem : Datum, conc : Datum, altr : Datum) ->
                        Datum @Cond (prem, conc, altr)

    # mk-letrec : (<VAR>, <LAMBDA>, <EXP>) -> <LETREC>
    fun mk-letrec = (dvar : Datum, dexp : Datum, body : Datum) ->
                        Datum @Letrec (dvar, dexp, body)


    #### Classifier ####

    # const?    : <EXP> -> Bool
    fun const?  = exp : Datum -> tag-of exp == @Const

    # var?      : <EXP> -> Bool
    fun var?    = exp : Datum -> tag-of exp == @Var

    # appl?     : <EXP> -> Bool
    fun appl?   = exp : Datum -> tag-of exp == @Appl

    # lambda?   : <EXP> -> Bool
    fun lambda? = exp : Datum -> tag-of exp == @Lambda

    # cond?     : <EXP> -> Bool
    fun cond?   = exp : Datum -> tag-of exp == @Cond

    # letrec?   : <EXP> -> Bool
    fun letrec? = exp : Datum -> tag-of exp == @Letrec
}



(######## Value ########

<VAL> = <INTEGER> + <BOOLEAN> + <FUNVAL>

################)

structure VAL = struct {
    #### Constructor ####

    # Int -> <INTEGER>
    fun mk-integer = x : Int -> Datum @Integer x

    # Bool -> <BOOLEAN>
    fun mk-boolean = x : Bool -> Datum @Boolean x

    # Fun -> <FUNVAL>
    fun mk-funval  = x : Fun -> Datum @Funval x


    #### Classifier ####

    # <VAL> -> Bool
    fun integer? = exp : Datum -> tag-of exp == @Integer

    # <VAL> -> Bool
    fun boolean? = exp : Datum -> tag-of exp == @Boolean

    # <VAL> -> Bool
    fun funval?  = exp : Datum -> tag-of exp == @Funval
}



(######## Parser ########

 <Exp> ::= <Const>  /* Undefined, Umu's Int */
         | <Var>    /* Undefined, Umu's Symbol */
         | <Form>


 <Form> ::= <If> | <Lambda> | <Apply> | <Let> | <Letrec>



 <If>     ::= "[" IF "," <Exp> "," <Exp> "," <Exp> "]"


 <Lambda> ::= "[" LAMBDA "," "[" <Var1> "," ... "," <VarN> "]" "," <Exp> "]"
                                                                /* N >= 1 */

 <Apply>  ::= "[" <Exp1> "," ... "," <ExpN> "]"  /* N >= 2 */


 <Let>    ::= "[" LET "," <Exp> "," <ValBind1> "," ... "," <ValBindN> "]"
 <ValBind> ::= "[" <Var> "," <Exp> "]"                          /* N >= 0 */


 <Letrec> ::= "[" LETREC "," <Exp> "," <LamBind1> "," ... "," <LamBindN> "]"
 <LamBind> ::= "[" <Var> "|" <Lambda> "]"                       /* N >= 0 */

########################)

# parse : 'a -> <EXP>
fun rec parse = exp : Top -> cond exp {
  const?    -> EXP::mk-const exp
| var?      -> EXP::mk-var exp
| form?     -> parse-form exp
  else      -> ERROR::syntax "Unknown Expression: " exp
} where {
    # const?    : Top -> Bool
    fun const?  = exp -> exp kind-of? Int

    # var?      : Top -> Bool
    fun var?    = exp -> exp kind-of? Symbol

    # form?     : Top -> Bool
    fun form?   = exp -> exp kind-of? List && length exp >= 2


    #### <Form> ####
    # parse-form : [Top] -> <EXP>
    fun parse-form = exp : List -> let {
        val [keyword|args] = exp
    in
        if (keyword kind-of? Symbol)
            case keyword {
              @IF       -> parse-if     args
            | @LAMBDA   -> parse-lambda args
            | @LET      -> parse-let    args
            | @LETREC   -> parse-letrec args
              else      -> parse-apply  exp
            }
        else
            parse-apply exp
    } where {
        #### <If> ####
        # parse-if : [Top] -> <COND>
        fun parse-if = args : List -> let {
            assert (length args == 3)
                ERROR::syntax "For IF's arity, expected 3, but: " args

            val [prem, conc, altr] = args
        in
            EXP::mk-cond (parse prem, parse conc, parse altr)
        }

        #### <Lambda> ####
        # parse-lambda : [Top] -> <LAMBDA>
        fun parse-lambda = args : List -> let {
            assert (length args == 2)
                ERROR::syntax 
                    "For LAMBDA's arity, expected 2, but: " args

            val [fps, body] = args

            assert (fps kind-of? List)
                ERROR::syntax
                    "In LAMBDA, expected a List of <Var>, but: " fps
            assert (length fps >= 1)
                ERROR::syntax
                    ("In LAMBDA, " ^
                        "expected length of <Var>s is 1 or more, but: ")
                    fps

            val [init-fp|fps'] = reverse fps

            assert (var? init-fp)
                ERROR::syntax "In LAMBDA, expected a <Var>, but: " init-fp

            val init-body-exp = EXP::mk-lambda (parse init-fp, parse body)
        in
            fps' |> foldl init-body-exp { fp body-exp ->
                let {
                    assert (var? fp)
                        ERROR::syntax "In LAMBDA, expected a <Var>, but: "
                        fp
                in
                    EXP::mk-lambda (parse fp, body-exp)
                }
            }
        }

        #### <Apply> ####
        # parse-apply : [Top] -> <APPL>
        fun parse-apply = args : List -> let {
            assert (length args >= 2)
                ERROR::syntax
                    "For APPLY's arity, expected 2 or more, but: " args

            val [opr, init-opnd|opnds] = args
            val init-opr-exp = EXP::mk-appl (parse opr, parse init-opnd)
        in
            opnds |> foldl init-opr-exp { opnd opr-exp ->
                EXP::mk-appl (opr-exp, parse opnd)
            }
        }

        #### <Let> ####
        # parse-let : [Top] -> <APPL>
        fun parse-let = args : List -> let {
            assert (length args >= 1)
                ERROR::syntax
                    "For LET's arity, expected 1 or more, but: " args

            val [body|binds] = args
        in
            binds |> foldr (parse body) { bind body-exp ->
                let {
                    assert (bind kind-of? List && length bind == 2)
                        ERROR::syntax
                            "For LET's binding, expected pair List, but: "
                            bind

                    val [dvar, dexp] = bind

                    assert (var? dvar)
                        ERROR::syntax "In LET, expected VAR, but: " dvar
                in
                    mk-let (parse dvar, parse dexp, body-exp)
                }
            }
        } where {
            fun mk-let = (dvar, dexp, body) -> EXP::mk-appl (
                EXP::mk-lambda (dvar, body),
                dexp
            )
        }

        #### <Letrec> ####
        # parse-letrec : [Top] -> <LETREC>
        fun parse-letrec = args : List -> let {
            assert (length args >= 1)
                ERROR::syntax
                    "For LETREC's arity, expected 1 or more, but: " args

            val [body|binds] = args
        in
            binds |> foldr (parse body) { bind body-exp ->
                let {
                    assert (bind kind-of? List && length bind >= 2)
                        ERROR::syntax
                            ("For LETREC's binding, " ^
                                "expected 2 or more List, but: ")
                            bind

                    val [dvar|dexp] = bind

                    assert (var? dvar)
                        ERROR::syntax "In LETREC, expected <VAR>, but: "
                        dvar
                    assert (form? dexp)
                        ERROR::syntax "In LETREC, expected <Form>, but: "
                        dexp

                    val [keyword|lam] = dexp

                    assert (keyword == @LAMBDA)
                        ERROR::syntax
                            "In LETREC, expected LAMBDA, but: " keyword
                in
                    EXP::mk-letrec (parse dvar, parse-lambda lam, body-exp)
                }
            }
        }
    }
}


######## Environment I ########

structure ENV-I = struct {
    # initial : <ENV>   where { type <ENV> = <VAR> -> <VAL> }
    val initial : Fun = initenv

    # lookup : (<ENV>, <VAR>) -> <VAL>
    fun lookup = (e :Fun, v : Datum) -> e v

    # extend-value : (<ENV>, <VAR>, <VAL>) -> <ENV>
    fun extend-value = (e : Fun, z : Datum, a : Datum) -> e'
    where {
        fun e'      = x : Datum -> if (x == z) a    else e x
    }

    # extend-recursive : (<ENV>, <VAR>, Fun) -> <ENV>
    fun extend-recursive = (e : Fun, z : Datum, f : Fun) -> e'
    where {
        fun rec e'  = x : Datum -> if (x == z) f e' else e x
    }
} where {
    fun initenv = x : Datum -> case (val-of x) {
    #### Constant
      @TRUE     -> VAL::mk-boolean  TRUE
    | @FALSE    -> VAL::mk-boolean  FALSE

    #### Number
    | @NEG      -> mk-unop  negate  VAL::mk-integer
    | @SUCC     -> mk-unop  (+ 1)   VAL::mk-integer
    | @PRED     -> mk-unop  (- 1)   VAL::mk-integer
    | @ADD      -> mk-binop (+)     VAL::mk-integer
    | @SUB      -> mk-binop (-)     VAL::mk-integer
    | @MUL      -> mk-binop (*)     VAL::mk-integer
    | @DIV      -> mk-binop (/)     VAL::mk-integer
    | @MOD      -> mk-binop (mod)   VAL::mk-integer

    #### Relational
    | @EQ       -> mk-binop (==)    VAL::mk-boolean
    | @LT       -> mk-binop (<)     VAL::mk-boolean

      else      -> ERROR::name "Unknown VAR: " x
    } where {
        # int : <VAL> -> Int
        fun int = x : Datum ->
            if (VAL::integer? x)
                val-of x
            else
                ERROR::type' "Expected a Int, but: " x

        # mk-unop : (Int -> 'a) -> ('a -> <VAL>) -> <FUNVAL>
        fun mk-unop = (unop : Fun) (mk : Fun) ->
            VAL::mk-funval { x : Datum -> unop (int x) |> mk }

        # mk-binop : (Int -> Int -> 'a) -> ('a -> <VAL>) -> <FUNVAL>
        fun mk-binop = (binop : Fun) (mk : Fun) ->
            VAL::mk-funval { x : Datum ->
                VAL::mk-funval { y -> binop (int x) (int y) |> mk }
            }
    }
}


######## Interpreter I ########

# interpret-I : <EXP> -> <VAL>
fun interpret-I = r : Datum -> eval (r, ENV-I::initial)
where {
    ######## Evaluator ########

    # eval : (<EXP>, <ENV>) -> <VAL>
    fun rec eval = (r : Datum, e : Fun) -> case r {
      Const     -> eval-const r
    | Var       -> eval-var    (r, e)
    | Appl      -> eval-appl   (r, e)
    | Lambda    -> eval-lambda (r, e)
    | Cond      -> eval-cond   (r, e)
    | Letrec    -> eval-letrec (r, e)
      else      -> ERROR::failure ("Unknown EXP: ", r)
    } where {
        # eval-const : <CONST> -> <INTEGER>
        fun eval-const = c : Datum -> VAL::mk-integer (val-of c)

        # eval-var : (<VAR>, <ENV>) -> <VAL>
        fun eval-var = (v : Datum, e : Fun) -> ENV-I::lookup (e, v)

        # eval-appl : (<APPL>, <ENV>) -> <VAL>
        fun eval-appl = (a : Datum, e : Fun) -> let {
            val (opr : Datum, opnd : Datum) = val-of a

            val va-opr : Datum = eval (opr, e)

            assert (VAL::funval? va-opr)
                ERROR::application
                    "In APPL, Expected a <FUNVAL>, but: " va-opr

            val va-opnd : Datum = eval (opnd, e)
        in
            (val-of va-opr) va-opnd
        }

        # eval-lambda : (<LAMBDA>, <ENV>) -> <FUNVAL>
        fun eval-lambda = (l : Datum, e : Fun) -> let {
            val (fp : Datum, body : Datum) = val-of l
        in
            VAL::mk-funval { a : Datum ->
                 eval (body, ENV-I::extend-value (e, fp, a))
            }
        }

        # eval-cond : (<COND>, <ENV>) -> <VAL>
        fun eval-cond = (c : Datum, e : Fun) -> let {
            val (prem : Datum, conc : Datum, altr : Datum) = val-of c

            val va-prem = eval (prem, e)

            assert (VAL::boolean? va-prem)
                ERROR::type' "In COND, expected a <BOOLEAN>, but: " va-prem
        in
            if (val-of va-prem)
                eval (conc, e)
            else
                eval (altr, e)
        }

        # eval-letrec : (<LETREC>, <ENV>) -> <VAL>
        fun eval-letrec =  (l : Datum, e : Fun) -> let {
            val (dvar : Datum, dexp : Datum, body : Datum) = val-of l

            assert (EXP::lambda? dexp)
                ERROR::failure "In LETREC, expected a LAMBDA, but: " r
        in
            eval (
                body,
                ENV-I::extend-recursive (
                    e,
                    dvar,
                    { e' : Fun -> eval-lambda (dexp, e') } # curryed
                )
            )
        }
    }
}



######## Prelude ########

# Keyword
val IF     = @IF
val LAMBDA = @LAMBDA
val LET    = @LET
val LETREC = @LETREC

# Primitive constant
val T = @TRUE
val F = @FALSE

# Primitive numeric function
val NEG  = @NEG
val SUCC = @SUCC
val PRED = @PRED
val ADD  = @ADD
val SUB  = @SUB
val MUL  = @MUL
val DIV  = @DIV
val MOD  = @MOD

# Primitive relational function
val EQ = @EQ
val LT = @LT

# Built-in logical function
val NOT = [LAMBDA, [@x], [IF, @x, F, T]]

# Built-in relational function
val NE = [LAMBDA, [@x, @y], [NOT, [EQ, @x, @y]]]
val LE = [LAMBDA, [@x, @y], [NOT, [LT, @y, @x]]]
val GT = [LAMBDA, [@x, @y],       [LT, @y, @x]]
val GE = [LAMBDA, [@x, @y], [NOT, [LT, @x, @y]]]



######## Runner - Frontend of Interpreter ########

fun mk-runner = interpret : Fun ->
       tee { src -> (puts "<SRC> : " ; pp src) }
    >> parse
    >> tee { exp -> (puts "<EXP> : " ; pp exp) }
    >> interpret
    >> tee { value -> (puts "-> <VAL> : " ; pp value) }

val run-I : Fun = mk-runner interpret-I



######## Assertion for Testing ########

structure ASSERT = struct {
    fun integer = actual expect -> let {
        assert (actual kind-of? Datum)              "Datum"
        assert (tag-of actual == @Integer)          "@Integer"
        assert (val-of actual kind-of? Int)         "Int"
        assert (val-of actual == expect)            (inspect expect)
    in
        ()
    }

    fun true  = actual -> boolean actual TRUE
    fun false = actual -> boolean actual FALSE

    fun funval = actual -> let {
        assert (actual kind-of? Datum)              "Datum"
        assert (tag-of actual == @Funval)           "@Funval"
        assert (val-of actual kind-of? Fun)         "Fun"
    in
        ()
    }
} where {
    fun boolean = actual expect -> let {
        assert (actual kind-of? Datum)              "Datum"
        assert (tag-of actual == @Boolean)          "@Boolean"
        assert (val-of actual kind-of? Bool)        "Bool"
        assert (val-of actual == expect)            (inspect expect)
    in
        ()
    }
}



######## Test ########

fun test = interpret : Fun -> let {
    val run = mk-runner interpret
in (
    print "[CONSTANT]" ;

        #[INPUT] 100
        let {
            val result = run 100
        in
            ASSERT::integer result 100
        } ;
        #[OUTPUT] -> 100
        nl () ;

        nl () ;

    print "[VARIABLE]" ;

        #[INPUT] TRUE
        let {
            val result = run T
        in
            ASSERT::true result
        } ;
        #[OUTPUT] -> TRUE
        nl () ;

        #[INPUT] succ
        let {
            val result = run SUCC
        in
            ASSERT::funval result
        } ;
        #[OUTPUT] -> #<{x -> ... }>
        nl () ;

        nl () ;

    print "[CONDITIONAL]" ;

        #[INPUT] if TRUE then 1 else 2
        let {
            val result = run [IF, T, 1, 2]
        in
            ASSERT::integer result 1
        } ;
        #[OUTPUT] -> 1
        nl () ;

        #[INPUT] if FALSE then 1 else 2
        let {
            val result = run [IF, F, 1, 2]
        in
            ASSERT::integer result 2
        } ;
        #[OUTPUT] -> 2
        nl () ;

        nl () ;

    print "[APPLY PRIMITIVE]" ;

        #[INPUT] succ 2
        let {
            val result = run [SUCC, 2]
        in
            ASSERT::integer result 3
        } ;
        #[OUTPUT] --> 3
        nl () ;

        #[INPUT] succ (succ (succ 2))
        let {
            val result = run [SUCC, [SUCC, [SUCC, 2]]]
        in
            ASSERT::integer result 5
        } ;
        #[OUTPUT] --> 5
        nl () ;

        #[INPUT] 1 + 2
        let {
            val result = run [ADD, 1, 2]
        in
            ASSERT::integer result 3
        } ;
        #[OUTPUT] --> 3
        nl () ;

        #[INPUT] 1 = 1
        let {
            val result = run [EQ, 1, 1]
        in
            ASSERT::true result
        } ;
        #[OUTPUT] --> TRUE
        nl () ;

        nl () ;

    print "[APPLY LAMBDA]" ;

        #[INPUT] (fun x -> succ x) 2
        let {
            val result = run [
                [LAMBDA, [@x], [SUCC, @x]],
                2
            ]
        in
            ASSERT::integer result 3
        } ;
        #[OUTPUT] --> 3
        nl () ;

        #[INPUT] (fun x y z -> x - y - z) 10 1 2
        let {
            val result = run [
                [LAMBDA, [@x, @y, @z], [SUB, [SUB, @x, @y], @z]],
                10, 1, 2
            ]
        in
            ASSERT::integer result 7
        } ;
        #[OUTPUT] --> 7
        nl () ;

        nl () ;

    print "[LET]" ;

        #[INPUT] let x = 2 in succ x
        let {
            val result = run [LET, [SUCC, @x], [@x, 2]]
        in
            ASSERT::integer result 3
        } ;
        #[OUTPUT] --> 3
        nl () ;

        #[INPUT]
        #   let x = 2 in
        #   let y = 3 in
        #   x * x + y * y
        let {
            val result = run [
                LET, [ADD, [MUL, @x, @x], [MUL, @y, @y]],
                [@x, 2],
                [@y, 3]
            ]
        in
            ASSERT::integer result 13
        } ;
        #[OUTPUT] --> 13
        nl () ;

        #[INPUT]
        #   let x = 1 in
        #   let y = x in
        #   let x = 2 in
        #   x + y
        let {
            val result = run [
                LET, [ADD, @x, @y],
                [@x, 1],
                [@y, @x],
                [@x, 2]
            ]
        in
            ASSERT::integer result 3
        } ;
        #[OUTPUT] --> 3
        nl () ;

        nl () ;

    print "[LETREC]" ;

        #[INPUT] let f = fun x -> succ x in f 2
        let {
            val result = run [
                LETREC, [@f, 2],
                [@f, LAMBDA, [@x], [SUCC, @x]]
            ]
        in
            ASSERT::integer result 3
        } ;
        #[OUTPUT] --> 3
        nl () ;

        #[INPUT]
        #   letrec add = fn x y => x + y in
        #   letrec mul = fn x y => x * y in
        #   add (mul 2 3) (mul 4 5)
        let {
            val result = run [
                LETREC, [@add, [@mul, 2, 3], [@mul, 4, 5]],
                [@add, LAMBDA, [@x, @y], [ADD, @x, @y]],
                [@mul, LAMBDA, [@x, @y], [MUL, @x, @y]]
            ]
        in
            ASSERT::integer result 26
        } ;
        #[OUTPUT] --> 26
        nl () ;

        #[INPUT]
        #   letrec fact = fun x ->
        #       if x <= 1 then 1 else x * fact (x - 1)
        #   in
        #       fact 4 
        let {
            val result = run [
                LETREC, [@fact, 4],
                [@fact, LAMBDA, [@x],
                    [IF, [LE, @x, 1],
                        1,
                        [MUL, @x, [@fact, [SUB, @x, 1]]]
                    ]
                ]
            ]
        in
            ASSERT::integer result 24
        } ;
        #[OUTPUT] --> 24
        nl () ;

        #[INPUT] 
        #   letrec gcd = fun a b ->
        #       if b == 0 then a else gcd b (a mod b)
        #   in
        #      gcd 16 28
        let {
            val result = run [
                LETREC, [@gcd, 16, 28],
                [@gcd, LAMBDA, [@a, @b],
                    [IF, [EQ, @b, 0],
                        @a,
                        [@gcd, @b, [MOD, @a, @b]]
                    ]
                ]
            ]
        in
            ASSERT::integer result 4
        } ;
        #[OUTPUT] --> 4
        nl () ;

        nl ()
    )
}

;;

test interpret-I
