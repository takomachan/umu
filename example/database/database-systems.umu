(#
    An Introduction to Database Systems Vol.1 Third Edition. 1981, C.J.Date
    データベース・システム概論 第三販, 1984, C.J.Date
#)


structure UAS = Umu::Assert


# 3 Data Structures and Corresponding Operators -- p63
# 3 データ構造および対応する演算子 -- p65

# 3.2 THE RELATIONAL APPROACH -- p64
# 3.2 関係型の方法 -- p66

structure RELATIONAL-DATA-MODEL-3 = struct {
    structure S  = SUPPLIER
    structure P  = PART
    structure SP = SHIPMENT
} where {
    structure SUPPLIER = struct {
        fun sno    = row : Product -> row$1
        fun sname  = row : Product -> row$2
        fun status = row : Product -> row$3
        fun city   = row : Product -> row$4

        val rows = map {
            (
                sno    : Symbol,
                sname  : String,
                status : Int,
                city   : String
            ) -> (
                sno:
                sname:
                status:
                city:
            )
        } [
        #     S#   SNAME   STATUS CITY
        #------------------------------------
            (@S1, "Smith", 20,   "London"),
            (@S2, "Jones", 10,   "Paris"),
            (@S3, "Blake", 30,   "Paris")
        ]
    }


    structure PART = struct {
        fun pno    = row : Product -> row$1
        fun pname  = row : Product -> row$2
        fun color  = row : Product -> row$3
        fun weight = row : Product -> row$4
        fun city   = row : Product -> row$5

        val rows = map {
            (
                pno    : Symbol,
                pname  : String,
                color  : String,
                weight : Int,
                city   : String
            ) -> (
                pno:
                pname:
                color:
                weight:
                city:
            )
        } [
        #     P#   PNAME    COLOR   WEIGHT CITY
        #---------------------------------------------
            (@P1, "Nut",   "Red",   12,   "London"),
            (@P2, "Bolt",  "Green", 17,   "Paris"),
            (@P3, "Screw", "Blue",  17,   "Rome"),
            (@P4, "Screw", "Red",   14,   "London")
        ]
    }


    structure SHIPMENT = struct {
        fun sno = row : Product -> row$1
        fun pno = row : Product -> row$2
        fun qty = row : Product -> row$3

        val rows = map {
            (
                sno : Symbol,
                pno : Symbol,
                qty : Int
            ) -> (
                sno:
                pno:
                qty:
            )
        } [
        #     S#   P#  QTY
        #---------------------
            (@S1, @P1, 300),
            (@S1, @P2, 200),
            (@S1, @P3, 400),
            (@S2, @P1, 300),
            (@S2, @P2, 400),
            (@S2, @P2, 200)
        ]
    }
}



import RELATIONAL-DATA-MODEL-3 {
    structure S
    structure P
    structure SP
}

;;



# 3.5 HIGHT-LEVEL OPERATORS -- p73
# 3.5 高水準演算子 -- p75

# 3.5.1 Find CITY for supplier S1.
# 3.5.1 納入業者 S1 に対して CITY を見つけること。

print "#### 3.5.1 ####" ;;
pp [|city|
    val (sno: city:) <- S::rows if sno == @S1
] ;;
# --> ["London"]
nl () ;;


# 3.5.2 Find S# and STATUS for suppliers in Paris.
# 3.5.2 Paris にある納入業者に対して S# と STATUS を見つけること。

print "#### 3.5.2 ####" ;;
pp [|sno: status:|
    val (sno: status: city:) <- S::rows if city == "Paris"
] ;;
# --> [(sno: @S2, status: 10), (sno: @S3, status: 30)]
nl () ;;


# 3.5.3 Find PNAME for parts supplied by suppliers S1.
# 3.5.3 納入業者 S1 から納入される部品に対して PNAME を見つけること。

print "#### 3.5.3 ####" ;;
pp [|pname|
    val (sno: pno: sp-pno       ) <- SP::rows if sno == @S1
    val (     pno: p-pno  pname:) <- P::rows

    if sp-pno == p-pno
] ;;
# --> ["Nut", "Bolt", "Screw"]
nl () ;;


# 3.5.4 For each part supplied, find P# and names of all cities supplying
#       the parts.
# 3.5.4 納入される各部品に対して、P# およびその部品を納入しているすべての
#       都市の名前を見つけること。

print "#### 3.5.4 ####" ;;
pp [|pno: city:|
    val (sno: sp-sno pno:)  <- SP::rows
    val (sno: s-sno  city:) <- S::rows

    if sp-sno == s-sno
] ;;
# --> [
#     (pno:@P1 city:"London"),
#     (pno:@P2 city:"London"),
#     (pno:@P3 city:"London"),
#     (pno:@P1 city:"Paris"),
#     (pno:@P2 city:"Paris"),
#     (pno:@P2 city:"Paris")
# ]
nl () ;;



# 4 Relational Data Structures -- p83
# 4 関係型データ構造 -- p65

# 4.5 SUMMARY -- p91
# 4.5 要約 -- p96

structure RELATIONAL-DATA-MODEL-4 = struct {
    structure S  = SUPPLIER
    structure P  = PART
    structure SP = SHIPMENT
} where {
    structure SUPPLIER = struct {
        fun sno    = row : Tuple -> row$1
        fun sname  = row : Tuple -> row$2
        fun status = row : Tuple -> row$3
        fun city   = row : Tuple -> row$4

        val rows = map {
            (
                sno    : Symbol,
                sname  : String,
                status : Int,
                city   : String
            ) -> (
                sno: sname: status: city:
            )
        } [
        #    S#    SNAME   STATUS CITY
        #------------------------------------
            (@S1, "Smith", 20,   "London"),
            (@S2, "Jones", 10,   "Paris"),
            (@S3, "Blake", 30,   "Paris"),
            (@S4, "Clark", 20,   "London"),
            (@S5, "Adams", 30,   "Athens")
        ]
    }


    structure PART = struct {
        fun pno    = row : Tuple -> row$1
        fun pname  = row : Tuple -> row$2
        fun color  = row : Tuple -> row$3
        fun weight = row : Tuple -> row$4
        fun city   = row : Tuple -> row$5

        val rows = map {
            (
                pno    : Symbol,
                pname  : String,
                color  : String,
                weight : Int,
                city   : String
            ) -> (
                pno: pname: color: weight: city:
            )
        } [
        #     P#   PNAME    COLOR   WEIGHT CITY
        #---------------------------------------------
            (@P1, "Nut",   "Red",   12,   "London"),
            (@P2, "Bolt",  "Green", 17,   "Paris"),
            (@P3, "Screw", "Blue",  17,   "Rome"),
            (@P4, "Screw", "Red",   14,   "London"),
            (@P5, "Cam",   "Blue",  12,   "Paris"),
            (@P6, "Cog",   "Red",   19,   "London")
        ]
    }


    structure SHIPMENT = struct {
        fun sno = row : Tuple -> row$1
        fun pno = row : Tuple -> row$2
        fun qty = row : Tuple -> row$3

        val rows = map {
            (
                sno : Symbol,
                pno : Symbol,
                qty : Int
            ) -> (
                sno: pno: qty:
            )
        } [
        #     S#   P#  QTY
        #---------------------
            (@S1, @P1, 300),
            (@S1, @P2, 200),
            (@S1, @P3, 400),
            (@S1, @P4, 200),
            (@S1, @P5, 100),
            (@S1, @P6, 100),
            (@S2, @P1, 300),
            (@S2, @P2, 400),
            (@S3, @P2, 200),
            (@S4, @P2, 200),
            (@S4, @P4, 300),
            (@S4, @P5, 400)
        ]
    }
}



import RELATIONAL-DATA-MODEL-4 {
    structure S
    structure P
    structure SP
}

;;



# 7 System R Data Manipulation -- p117
# 7 システムRのデータ操作 -- p121

# 7.2 RETRIEVAL OPERATIONS -- p117
# 7.2 検索操作 -- p121

# Get supplier numbers and status for suppliers in Paris.
# Paris の納入業者について納入業者番号と状態を求めよ。
(#
    SELECT S#, STATUS
    FROM   S
    WHERE  CITY = 'PARIS'
#)

print "#### 7.2 ####" ;;
pp [|sno: status:|
    val (sno: status: city:) <- S::rows if city == "Paris"
] ;;
# --> [(sno:@S2 status:10), (sno:@S3 status:30)]
nl () ;;


# 7.2.1 Simple retrieval: Get part numbers for all parts supplied.
# 7.2.1 単純検索: 納入されたすべての部品に対して部品番号を求める。
(#
    SELECT P#
    FROM   SP
#)

print "#### 7.2.1 ####" ;;
pp [|pno| val (pno:) <- SP::rows] ;;
# --> [@P1, @P2, @P3, @P4, @P5, @P6, @P1, @P2, @P2, @P2, @P4, @P5]
nl () ;;


# 7.2.2 Simple retrieval: Get full details of all suppliers.
# 7.2.2 単純検索: すべての納入業者の完全な記述を求める。
(#
    SELECT *
    FROM   S
#)

print "#### 7.2.2 ####" ;;
pp [|sp| val sp <- SP::rows] ;;
# --> [
#     (sno:@S1 pno:@P1 qty:300),
#     (sno:@S1 pno:@P2 qty:200),
#     (sno:@S1 pno:@P3 qty:400),
#     (sno:@S1 pno:@P4 qty:200),
#     (sno:@S1 pno:@P5 qty:100),
#     (sno:@S1 pno:@P6 qty:100),
#     (sno:@S2 pno:@P1 qty:300),
#     (sno:@S2 pno:@P2 qty:400),
#     (sno:@S3 pno:@P2 qty:200),
#     (sno:@S4 pno:@P2 qty:200),
#     (sno:@S4 pno:@P4 qty:300),
#     (sno:@S4 pno:@P5 qty:400)
# ]
nl () ;;


# 7.2.3 Qualified retrieval: Get supplier numbers for suppliers in Paris
#       with status > 20.
# 7.2.3 限定検索: 状態 >20 なる Paris の納入業者に対する納入業者番号を
#       求める。
(#
    SELECT S#
    FROM   S
    WHERE  CITY = 'PARIS'
    AND    STATUS > 20
#)

print "#### 7.2.3 ####" ;;
pp [|sno|
    val (sno: status: city:) <- S::rows

    if city == "Paris"
    && status > 20
] ;;
# --> [@S3]
nl () ;;


# 7.2.4 Retrieval with ordring: Get supplier numbers and status for
#       suppliers in Paris, in descending order of status.
# 7.2.4 順序付けを伴う検索: Paris の納入業者に対する納入業者番号と状態を
#       状態の降順で求める。
(#
    SELECT S#, STATUS
    FROM   S
    WHERE  CITY = 'PARIS'
    ORDER  BY STATUS DESC
#)

print "#### 7.2.4 ####" ;;
pp (
     [|sno: status:|
        val (sno: status: city:) <- S::rows

        if city == "Paris"
     ] |>
         sort-with { a b -> negate <| a$status <=> b$status }
) ;;
# --> [(sno:@S3 status:30), (sno:@S2 status:10)]
nl () ;;


# 7.2.5 Retrieval from more than one table: For each part supplied,
#       get part number and names of all cities supplying the part.
# 7.2.5 2個以上の表からの検索: 納入された各部品について、部品番号および
#       その部品を納入しているすべての都市の名前を求める。
(#
    SELECT UNIQUE P#, CITY
    FROM   SP, S
    WHERE  SP.S# = S.S#
#)

print "#### 7.2.5 ####" ;;
pp (
     [|pno: city:|
        val (sno: sp-sno pno:)  <- SP::rows
        val (sno: s-sno  city:) <- S::rows

        if sp-sno == s-sno
     ] |>
         sort |> uniq
) ;;
# --> [
#   (pno:@P1 city:"London"),
#   (pno:@P1 city:"Paris"),
#   (pno:@P2 city:"London"),
#   (pno:@P2 city:"Paris"),
#   (pno:@P3 city:"London"),
#   (pno:@P4 city:"London"),
#   (pno:@P5 city:"London"),
#   (pno:@P6 city:"London")
# ]
nl () ;;


# 7.2.6 Retrieval involving a join of a table with itself:
#       Get all parts of supplier numbers such that the two suppliers are
#       located in the same city.
# 7.2.6 表のそれ自身との結合を含む検索：２つの納入業者が同じ都市に
#       あるような納入業者番号のすべての対を求める。
(#
    SELECT FIRST.S#, SECOND.S#
    FROM   S FIRST, S SECOND
    WHERE  FIRST.CITY = SECOND.CITY
    AND    FIRST.S# < SECOND.S#
#)

print "#### 7.2.6 ####" ;;
pp (
     [|first$sno, second$sno|
        val first  <- S::rows
        val second <- S::rows

        if first$city == second$city
        && first$sno < second$sno
     ]
) ;;
# --> [(@S1, @S4), (@S2, @S3)]
nl () ;;


# 7.2.7 Retrieval using ANY:
#       Get supplier names for suppliers who supply Part P2.
# 7.2.7 ANYを使用する検索：
#       部品P2を納入する納入業者についてその名前を求める。
(#
    SELECT UNIQUE SNAME
    FROM   S, SP
    WHERE  S.S# = SP.S#
    AND    SP.P# = 'P2'
#)

print "#### 7.2.7 (1) Using JOIN ####" ;;
pp (
     [|sname|
        val (sno: s-sno  sname:) <- S::rows
        val (sno: sp-sno pno:)   <- SP::rows

        if s-sno == sp-sno
        && pno == @P2
     ]
) ;;
# --> ["Smith", "Jones", "Blake", "Clark"]
nl () ;;

print "#### 7.2.7 (2) Using subquery ####" ;;
pp (
     [|sname|
        val (sno: sname:) <- S::rows

        if any? (== sno) [|sno|
            val (sno: pno:) <- SP::rows

            if pno == @P2
        ]
     ]
) ;;
# --> ["Smith", "Jones", "Blake", "Clark"]
nl () ;;


# 7.2.8 Retrieval using < ANY:
#       Get supplier numbers for suppliers with status value
#       less than the current maximum status value in the S table.
# 7.2.8 < ANYを使用する検索：
#       S表において状態値が現在の最大状態値より小さいような納入業者について
#       納入業者番号を求める。
(#
    SELECT S#
    FROM   S
    WHERE  STATUS < ANY (SELECT STATUS
                         FROM   S)
#)

print "#### 7.2.8 ####" ;;
pp (
     [|sno|
        val (sno: status:) <- S::rows

        if any? (> status) [|status|
            val (status:) <- S::rows
        ]
     ]
) ;;
# --> [@S1, @S2, @S4]
nl () ;;


# 7.2.9 Retrieval using IN:
#       Get supplier names for suppliers who supply part P2
#       (the same as Example 7.2.7).
# 7.2.9 INを使用する検索：
#       部品P2を納入する納入業者について納入業者の名前を求める
#       (例7.2.7と同じ)。
(#
    SELECT SNAME
    FROM   S
    WHERE  S# IN
          (SELECT S#
           FROM   SP
           WHERE  P# = 'P2')
#)

print "#### 7.2.9 ####" ;;
pp (
     [|sname|
        val (sno: sname:) <- S::rows

        if include? sno [|sno|
            val (sno: pno:) <- SP::rows

            if pno == @P2
        ]
     ]
) ;;
# --> ["Smith", "Jones", "Blake", "Clark"]
nl () ;;


# 7.2.10 Retrieval with multiple levels of nesting:
#       Get supplier names for suppliers who supply at least one red part.
# 7.2.10 多重入れ子構成を含む検索：
#       赤色の部品を少なくとも１個納入している納入業者について
#       その名前を求める。
(#
    SELECT SNAME
    FROM   S
    WHERE  S# IN
          (SELECT S#
           FROM   SP
           WHERE  P# IN
                 (SELECT P#
                  FROM   P
                  WEHERE COLOR = 'RED'))
#)

print "#### 7.2.10 ####" ;;
pp (
     [|sname|
        val (sno: sname:) <- S::rows

        if include? sno [|sno|
            val (sno: pno:) <- SP::rows

            if include? pno [|pno|
                val (pno: color:) <- P::rows

                if color == "Red"
            ]
        ]
     ]
) ;;
# --> ["Smith", "Jones", "Clark"]
nl () ;;


# 7.2.11 Retrieval with a subquery, with interblock reference:
#       Get supplier names for suppliers who supply part P2
#       (the same as Example 7.2.7 and 7.2.9).
# 7.2.11 副次問合せを含み、ブロックにまたがる参照を含む検索：
#       部品P2を納入する納入業者についてその名前を求める
#       (例7.2.7および例7.2.9と同じ)。
(#
    SELECT SNAME
    FROM   S
    WHERE  'P2' IN
          (SELECT P#
           FROM   SP
           WHERE  S# = S.S#)
#)

print "#### 7.2.11 ####" ;;
pp (
     [|sname|
        val (sno:s-sno sname:) <- S::rows

        if include? @P2 [|pno|
            val (sno: pno:) <- SP::rows

            if sno == s-sno
        ]
     ]
) ;;
# --> ["Smith", "Jones", "Blake", "Clark"]
nl () ;;


# 7.2.12 Retrieval with a subquery, with same table involved in both blocks:
#       Get supplier numbers for suppliers who supply at least one part
#       supplied by supplier S2.
# 7.2.12 副次問合せを含み、両方のブロックに同じ表が含まれるような検索：
#       納入業者S2から納入されている部品を少なくとも１個は納入している
#       納入業者についてその納入業者番号を求める。
(#
    SELECT UNIQUE S#
    FROM   SP
    WHERE  P# IN
          (SELECT P#
           FROM   SP
           WHERE  S# = 'S2')
#)

print "#### 7.2.12 ####" ;;
pp (
     [|sno|
        val (sno: pno:) <- SP::rows

        if include? pno [|pno|
            val (sno: pno:) <- SP::rows

            if sno == @S2
        ]
     ] |>
        sort |> uniq
) ;;
# --> [@S1, @S2, @S3, @S4]
nl () ;;


# 7.2.13 Retrieval with a subquery, with interblock reference and
#       same table involved in both block.
# 7.2.13 副次問合せとブロックにまたがる参照を含み、両方のブロックに
#       同じ表が含まれるような検索。
(#
    SELECT UNIQUE P#
    FROM   SP SPX
    WHERE  P# IN
          (SELECT P#
           FROM   SP
           WHERE  S# != SPX.S#)
#)

print "#### 7.2.13 ####" ;;
pp (
     [|spx$pno|
        val spx <- SP::rows

        if include? (spx$pno) [|pno|
            val (sno: pno:) <- SP::rows

            if sno <> spx$sno
        ]
     ] |>
        sort |> uniq
) ;;
# --> [@S1, @S2, @S4, @S5]
nl () ;;


# 7.2.14 Retrieval using ALL:
#       Get supplier names for suppliers who do not supply part P2.
# 7.2.14 ALLを使用する検索：
#       部品P2を納入しない納入業者についてその名前を求める。
(#
    SELECT SNAME
    FROM   S
    WHERE  'P2' != ALL
          (SELECT P#
           FROM   SP
           WHERE  S# = S.S#)
#)

print "#### 7.2.14 ####" ;;
pp (
     [|sname|
        val (sno:s-sno sname:) <- S::rows

        if not <| include? @P2 [|pno|
            val (sno: pno:) <- SP::rows

            if sno == s-sno
        ]
     ]
) ;;
# --> ["Adams"]
nl () ;;


# 7.2.15 Retrieval with subquery and unqualified comparison operator:
#       Get supplier numbers for suppliers who are located
#       in the same city as supplier S1.
# 7.2.15 副次問合せと修飾なしの比較演算子を含む検索：
#       納入業者S1と同じ都市にいる納入業者について
#       その納入業者番号を求める。
(#
    SELECT S#
    FROM   S
    WHERE  CITY =
          (SELECT CITY
           FROM   S
           WHERE  S# = 'S1')
#)

print "#### 7.2.15 ####" ;;
pp (
     [|sno|
         val (sno: city:) <- S::rows

         if include? city [|city|
             val (sno: city:) <- S::rows

             if sno == @S1
         ]
     ]
) ;;
# --> [@S1, @S4]
nl () ;;


# 7.2.16 Retrieval using EXISTS:
#       Get supplier names for suppliers who supply part P2
#       (the same as Examples 7.2.7, 7.2.9, and 7.2.11).
# 7.2.16 EXISTSを使用する検索：
#       部品P2を納入する納入業者についてその名前を求める
#       (例7.2.7, 7.2.9, および7.2.11と同じ)。
(#
    SELECT SNAME
    FROM   S
    WHERE  EXISTS
          (SELECT *
           FROM   SP
           WHERE  S# = S.S#
           AND    P# = 'P2')
#)

print "#### 7.2.16 ####" ;;
pp (
     [|sname|
         val (sno: sname:) <- S::rows

         if not <| empty? [|sp|
             val sp <- SP::rows

             if sp$sno == sno
             && sp$pno == @P2
         ]
     ]
) ;;
# --> ["Smith", "Jones", "Blake", "Clark"]
nl () ;;


# 7.2.17 Retrieval using NOT EXISTS:
#       Get supplier names for suppliers who do not supply part P2
#       (the same as Examples 7.2.14).
# 7.2.17 NOT EXISTSを使用する検索：
#       部品P2を納入しない納入業者についてその名前を求める
#       (例7.2.14と同じ)。
(#
    SELECT SNAME
    FROM   S
    WHERE  NOT EXISTS
          (SELECT *
           FROM   SP
           WHERE  S# = S.S#
           AND    P# = 'P2')
#)

print "#### 7.2.17 ####" ;;
pp (
     [|sname|
         val (sno: sname:) <- S::rows

         if empty? [|sp|
             val sp <- SP::rows

             if sp$sno == sno
             && sp$pno == @P2
         ]
     ]
) ;;
# --> ["Adams"]
nl () ;;


# 7.2.18 Retrieval using NOT EXISTS:
#       Get supplier names for suppliers who supply all parts.
# 7.2.18 NOT EXISTSを使用する検索：
#       すべての部品を納入する納入業者についてその名前を求める。
(#
    SELECT SNAME
    FROM   S
    WHERE  NOT EXISTS
          (SELECT *
           FROM   P
           WHERE  NOT EXISTS
                 (SELECT *
                  FROM   SP
                  WHERE  S# = S.S#
                  AND    P# = P.P# ))
#)

print "#### 7.2.18 ####" ;;
pp (
     [|sname|
         val (sno:s-sno sname:) <- S::rows

         if empty? [|()|
             val (pno:p-pno) <- P::rows

             if empty? [|()|
                 val (sno: pno:) <- SP::rows

                 if sno == s-sno
                 && pno == p-pno
             ]
         ]
     ]
) ;;
# --> ["Smith"]
nl () ;;
