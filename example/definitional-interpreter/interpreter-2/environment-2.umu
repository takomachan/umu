(######## Environment II ########

<ENV> = <INIT> + <SIMP> + <REC>

<INIT> = []
<SIMP> = [bvar:<VAR>, bval:<VAL>, old:<ENV>]
<REC>  = [dvar:<VAR>, dexp:<EXP>, old:<ENV>]

################)

structure ENV-II = struct {
    val initial : Datum = mk-init ()


    # lookup : (<ENV>, Symbol) -> <VAL>
    fun rec lookup = (e : Datum, x : Symbol) -> case e of {
    | Init -> case x of {
        #### Constant
        | @TRUE     -> VAL-II::mk-boolean TRUE
        | @FALSE    -> VAL-II::mk-boolean FALSE

        #### Number
        | @NEG      -> VAL-II::mk-unop   x
        | @SUCC     -> VAL-II::mk-unop   x
        | @PRED     -> VAL-II::mk-unop   x
        | @ADD      -> VAL-II::mk-binop1 x
        | @SUB      -> VAL-II::mk-binop1 x
        | @MUL      -> VAL-II::mk-binop1 x
        | @DIV      -> VAL-II::mk-binop1 x
        | @MOD      -> VAL-II::mk-binop1 x

        #### Relational
        | @EQ       -> VAL-II::mk-binop1 x
        | @LT       -> VAL-II::mk-binop1 x

        else        -> ERROR::name "Unknown VAR: " x
        }
    | Simp (bvar : Symbol, bval : Datum, old : Datum) ->
        if x == bvar then
            bval
        else
            lookup (old, x)
    | Rec (dvar : Symbol, dexp : Datum, old : Datum) ->
        if x == dvar then
            VAL-II::mk-closr(dexp, e)
        else
            lookup (old, x)
    }

    # extend-value : (<ENV>, Symbol, <VAL>) -> <ENV>
    fun extend-value = (e : Datum, bvar : Symbol, bval : Datum) ->
         mk-simp (bvar, bval, e)

    # extend-recursive : (<ENV>, Symbol, <EXP>) -> <ENV>
    fun extend-recursive = (e : Datum, dvar : Symbol, dexp : Datum) ->
        mk-rec (dvar, dexp, e)
} where {
    #### Constructor ####

    # mk-init : () -> <INIT>
    fun mk-init = () ->
                 Datum @Init ()

    # mk-simp : (Symbol, <VAL>, <ENV>) -> <SIMP>
    fun mk-simp = (bvar : Symbol, bval : Datum, old : Datum) ->
                 Datum @Simp (bvar, bval, old)

    # mk-rec : (Symbol, <EXP>, <ENV>) -> <REC>
    fun mk-rec = (dvar : Symbol, dexp : Datum, old : Datum) ->
                 Datum @Rec (dvar, dexp, old)
}
