######## Tester I ########

structure TESTER-I = struct {
    structure ASSERT = ASSERT

    fun make-tester = interpret : Fun -> { () ->
        let {
            val run = make-runner interpret
        in do (
            ! print "[CONSTANT]"

                #[INPUT] 100
                ! let {
                    val result = run 100
                in
                    ASSERT::integer result 100
                }
                #[OUTPUT] --> 100
                ! nl ()

                ! nl ()

            ! print "[VARIABLE]"

                #[INPUT] TRUE
                ! let {
                    val result = run T
                in
                    ASSERT::true result
                }
                #[OUTPUT] --> TRUE
                ! nl ()

                #[INPUT] succ
                ! let {
                    val result = run SUCC
                in
                    ASSERT::funval result
                }
                #[OUTPUT] --> #<{x -> ... }>
                ! nl ()

                ! nl ()

            ! print "[CONDITIONAL]"

                #[INPUT] if TRUE then 1 else 2
                ! let {
                    val result = run [IF, T, 1, 2]
                in
                    ASSERT::integer result 1
                }
                #[OUTPUT] --> 1
                ! nl ()

                #[INPUT] if FALSE then 1 else 2
                ! let {
                    val result = run [IF, F, 1, 2]
                in
                    ASSERT::integer result 2
                }
                #[OUTPUT] --> 2
                ! nl ()

                ! nl ()

            ! print "[APPLY PRIMITIVE]"

                #[INPUT] succ 2
                ! let {
                    val result = run [SUCC, 2]
                in
                    ASSERT::integer result 3
                }
                #[OUTPUT] --> 3
                ! nl ()

                #[INPUT] succ (succ (succ 2))
                ! let {
                    val result = run [SUCC, [SUCC, [SUCC, 2]]]
                in
                    ASSERT::integer result 5
                }
                #[OUTPUT] --> 5
                ! nl ()

                #[INPUT] 1 + 2
                ! let {
                    val result = run [ADD, 1, 2]
                in
                    ASSERT::integer result 3
                }
                #[OUTPUT] --> 3
                ! nl ()

                #[INPUT] 1 == 1
                ! let {
                    val result = run [EQ, 1, 1]
                in
                    ASSERT::true result
                }
                #[OUTPUT] --> TRUE
                ! nl ()

                ! nl ()

            ! print "[APPLY LAMBDA]"

                #[INPUT] (fun x -> succ x) 2
                ! let {
                    val result = run [
                        [LAMBDA, [@x], [SUCC, @x]],
                        2
                    ]
                in
                    ASSERT::integer result 3
                }
                #[OUTPUT] --> 3
                ! nl ()

                #[INPUT] (fun x y z -> x - y - z) 10 1 2
                ! let {
                    val result = run [
                        [LAMBDA, [@x, @y, @z], [SUB, [SUB, @x, @y], @z]],
                        10, 1, 2
                    ]
                in
                    ASSERT::integer result 7
                }
                #[OUTPUT] --> 7
                ! nl ()

                ! nl ()

            ! print "[LET]"

                #[INPUT] let x = 2 in succ x
                ! let {
                    val result = run [LET, [SUCC, @x], [@x, 2]]
                in
                    ASSERT::integer result 3
                }
                #[OUTPUT] --> 3
                ! nl ()

                #[INPUT]
                #   let x = 2 in
                #   let y = 3 in
                #   x * x + y * y
                ! let {
                    val result = run [
                        LET, [ADD, [MUL, @x, @x], [MUL, @y, @y]],
                        [@x, 2],
                        [@y, 3]
                    ]
                in
                    ASSERT::integer result 13
                }
                #[OUTPUT] --> 13
                ! nl ()

                #[INPUT]
                #   let x = 1 in
                #   let y = x in
                #   let x = 2 in
                #   x + y
                ! let {
                    val result = run [
                        LET, [ADD, @x, @y],
                        [@x, 1],
                        [@y, @x],
                        [@x, 2]
                    ]
                in
                    ASSERT::integer result 3
                }
                #[OUTPUT] --> 3
                ! nl ()

                ! nl ()

            ! print "[LETREC]"

                #[INPUT] let f = fun x -> succ x in f 2
                ! let {
                    val result = run [
                        LETREC, [@f, 2],
                        [@f, LAMBDA, [@x], [SUCC, @x]]
                    ]
                in
                    ASSERT::integer result 3
                }
                #[OUTPUT] --> 3
                ! nl ()

                #[INPUT]
                #   let rec add = fun x y -> x + y in
                #   let rec mul = fun x y -> x * y in
                #   add (mul 2 3) (mul 4 5)
                ! let {
                    val result = run [
                        LETREC, [@add, [@mul, 2, 3], [@mul, 4, 5]],
                        [@add, LAMBDA, [@x, @y], [ADD, @x, @y]],
                        [@mul, LAMBDA, [@x, @y], [MUL, @x, @y]]
                    ]
                in
                    ASSERT::integer result 26
                }
                #[OUTPUT] --> 26
                ! nl ()

                #[INPUT]
                #   let rec fact = fun x ->
                #       if x <= 1 then 1 else x * fact (x - 1)
                #   in
                #       fact 4 
                ! let {
                    val result = run [
                        LETREC, [@fact, 4],
                        [@fact, LAMBDA, [@x],
                            [IF, [LE, @x, 1],
                                1,
                                [MUL, @x, [@fact, [SUB, @x, 1]]]
                            ]
                        ]
                    ]
                in
                    ASSERT::integer result 24
                }
                #[OUTPUT] --> 24
                ! nl ()

                #[INPUT] 
                #   letrec gcd = fun a b ->
                #       if b == 0 then a else gcd b (a mod b)
                #   in
                #      gcd 16 28
                ! let {
                    val result = run [
                        LETREC, [@gcd, 16, 28],
                        [@gcd, LAMBDA, [@a, @b],
                            [IF, [EQ, @b, 0],
                                @a,
                                [@gcd, @b, [MOD, @a, @b]]
                            ]
                        ]
                    ]
                in
                    ASSERT::integer result 4
                }
                #[OUTPUT] --> 4
                ! nl ()

                ! nl ()
            )
        }
    }
} where {
    ######## Assertion for Testing ########

    structure ASSERT = struct {
        fun integer = actual expect -> let {
            assert actual kind-of? Datum        -> "Datum"
            assert tag-of actual == @Integer    -> "@Integer"
            assert val-of actual kind-of? Int   -> "Int"
            assert val-of actual == expect      -> inspect expect
        in
            ()
        }

        fun true  = actual -> boolean actual TRUE
        fun false = actual -> boolean actual FALSE

        fun funval = actual -> let {
            assert actual kind-of? Datum        -> "Datum"
            assert tag-of actual == @Funval     -> "@Funval"
            assert val-of actual kind-of? Fun   -> "Fun"
        in
            ()
        }
    } where {
        fun boolean = actual expect -> let {
            assert actual kind-of? Datum        -> "Datum"
            assert tag-of actual == @Boolean    -> "@Boolean"
            assert val-of actual kind-of? Bool  -> "Bool"
            assert val-of actual == expect      -> inspect expect
        in
            ()
        }
    }
}
