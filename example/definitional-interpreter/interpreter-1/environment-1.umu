######## Environment I ########

structure ENV-I = struct {
    # initial : <ENV>   where { type <ENV> = <VAR> -> <VAL> }
    val initial : Fun = initenv

    # lookup : (<ENV>, Symbol) -> <VAL>
    fun lookup = (e :Fun, v : Symbol) -> e v

    # extend-value : (<ENV>, Symbol, <VAL>) -> <ENV>
    fun extend-value = (e : Fun, z : Symbol, a : Datum) -> e'
    where {
        fun e'      = x : Symbol -> if x == z then a    else e x
    }

    # extend-recursive : (<ENV>, Symbol, Fun) -> <ENV>
    fun extend-recursive = (e : Fun, z : Symbol, f : Fun) -> e'
    where {
        fun rec e'  = x : Symbol -> if x == z then f e' else e x
    }
} where {
    fun initenv = x : Symbol -> case x of {
    #### Constant
    | @TRUE     -> VAL-I::mk-boolean  TRUE
    | @FALSE    -> VAL-I::mk-boolean  FALSE

    #### Number
    | @NEG      -> mk-unop  negate  VAL-I::mk-integer
    | @SUCC     -> mk-unop  (+ 1)   VAL-I::mk-integer
    | @PRED     -> mk-unop  (- 1)   VAL-I::mk-integer
    | @ADD      -> mk-binop (+)     VAL-I::mk-integer
    | @SUB      -> mk-binop (-)     VAL-I::mk-integer
    | @MUL      -> mk-binop (*)     VAL-I::mk-integer
    | @DIV      -> mk-binop (/)     VAL-I::mk-integer
    | @MOD      -> mk-binop (mod)   VAL-I::mk-integer

    #### Relational
    | @EQ       -> mk-binop (==)    VAL-I::mk-boolean
    | @LT       -> mk-binop (<)     VAL-I::mk-boolean

    else        -> ERROR::name "Unknown VAR: " x
    } where {
        # int : <VAL> -> Int
        fun int = x : Datum ->
            if VAL-I::integer? x then
                val-of x
            else
                ERROR::type' "Expected a Int, but: " x

        # mk-unop : (Int -> 'a) -> ('a -> <VAL>) -> <FUNVAL>
        fun mk-unop = (unop : Fun) (mk : Fun) ->
            VAL-I::mk-funval { x : Datum -> unop (int x) |> mk }

        # mk-binop : (Int -> Int -> 'a) -> ('a -> <VAL>) -> <FUNVAL>
        fun mk-binop = (binop : Fun) (mk : Fun) ->
            VAL-I::mk-funval { x : Datum ->
                VAL-I::mk-funval { y -> binop (int x) (int y) |> mk }
            }
    }
}
