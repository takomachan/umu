######## Evaluator-I ########

structure EVAL-I = struct {
# eval : (<EXP>, <ENV>) -> <VAL>  where <ENV> = <VAR> -> <VAL>
    fun rec eval = (r : Datum, e : Fun) -> case r of {
    | Const     -> eval-const r
    | Var       -> eval-var    (r, e)
    | Appl      -> eval-appl   (r, e)
    | Lambda    -> eval-lambda (r, e)
    | Cond      -> eval-cond   (r, e)
    | Letrec    -> eval-letrec (r, e)
    else        -> ERROR::failure ("Unknown EXP: ", r)
    } where {
        # eval-const : <CONST> -> <INTEGER>
        fun eval-const = c : Datum -> VAL::mk-integer <| val-of c

        # eval-var : (<VAR>, <ENV>) -> <VAL>
        fun eval-var = (v : Datum, e : Fun) -> ENV-I::lookup (e, v)

        # eval-appl : (<APPL>, <ENV>) -> <VAL>
        fun eval-appl = (a : Datum, e : Fun) -> let {
            val (opr : Datum, opnd : Datum) = val-of a

            val va-opr : Datum = eval (opr, e)

            assert VAL::funval? va-opr ->
                ERROR::application
                    "In APPL, Expected a <FUNVAL>, but: " va-opr

            val va-opnd : Datum = eval (opnd, e)
        in
            val-of va-opr <| va-opnd
        }

        # eval-lambda : (<LAMBDA>, <ENV>) -> <FUNVAL>
        fun eval-lambda = (l : Datum, e : Fun) -> let {
            val (fp : Datum, body : Datum) = val-of l
        in
            VAL::mk-funval { a : Datum ->
                 eval (body, ENV-I::extend-value (e, fp, a))
            }
        }

        # eval-cond : (<COND>, <ENV>) -> <VAL>
        fun eval-cond = (c : Datum, e : Fun) -> let {
            val (prem : Datum, conc : Datum, altr : Datum) = val-of c

            val va-prem = eval (prem, e)

            assert VAL::boolean? va-prem ->
                ERROR::type' "In COND, expected a <BOOLEAN>, but: " va-prem
        in
            if val-of va-prem then
                eval (conc, e)
            else
                eval (altr, e)
        }

        # eval-letrec : (<LETREC>, <ENV>) -> <VAL>
        fun eval-letrec =  (l : Datum, e : Fun) -> let {
            val (dvar : Datum, dexp : Datum, body : Datum) = val-of l

            assert EXP::lambda? dexp ->
                ERROR::failure "In LETREC, expected a LAMBDA, but: " r
        in
            eval (
                body,
                ENV-I::extend-recursive (
                    e,
                    dvar,
                    { e' : Fun -> eval-lambda (dexp, e') } # curryed
                )
            )
        }
    }
}
