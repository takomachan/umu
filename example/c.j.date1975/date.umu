(#
    An Introduction to Database Systems Vol.1 Third Edition. 1075, C.J.Date
    データベース・システム概論 第三販, 1984, C.J.Date
#)


structure UAS = Umu::Assert


# 3 Data Structures and Corresponding Operators -- p63
# 3 データ構造および対応する演算子 -- p65

# 3.2 THE RELATIONAL APPROACH -- p64
# 3.2 関係型の方法 -- p66

structure SUPPLIERS = struct {
    fun sno    = row : Product -> row$1
    fun sname  = row : Product -> row$2
    fun status = row : Product -> row$3
    fun city   = row : Product -> row$4

    val rows = map { row -> (
            sno:    sno row,
            sname:  sname row,
            status: status row,
            city:   city row
        )
    } [
    #     S#   SNAME   STATUS CITY
    #------------------------------------
        (@S1, "Smith", 20,   "London"),
        (@S2, "Jones", 10,   "Paris"),
        (@S3, "Blake", 30,   "Paris")
    ]
}


structure PARTS = struct {
    fun pno    = row : Product -> row$1
    fun pname  = row : Product -> row$2
    fun color  = row : Product -> row$3
    fun weight = row : Product -> row$4
    fun city   = row : Product -> row$5

    val rows = map { row -> (
            pno:    pno row,
            pname:  pname row,
            color:  color row,
            weight: weight row,
            city:   city row
        )
    } [
    #     P#   PNAME    COLOR   WEIGHT CITY
    #---------------------------------------------
        (@P1, "Nut",   "Red",   12,   "London"),
        (@P2, "Bolt",  "Green", 17,   "Paris"),
        (@P3, "Screw", "Blue",  17,   "Rome"),
        (@P4, "Screw", "Red",   14,   "London")
    ]
}


structure SHIPMENTS = struct {
    fun sno = row : Tuple -> row$1
    fun pno = row : Tuple -> row$2
    fun qty = row : Tuple -> row$3

    val rows = map { row -> (
            sno: sno row,
            pno: pno row,
            qty: qty row
        )
    } [
    #     S#   P#  QTY
    #---------------------
        (@S1, @P1, 300),
        (@S1, @P2, 200),
        (@S1, @P3, 400),
        (@S2, @P1, 300),
        (@S2, @P2, 400),
        (@S2, @P2, 200)
    ]
}


structure S  = SUPPLIERS
structure P  = PARTS
structure SP = SHIPMENTS

;;



# 3.5 HIGHT-LEVEL OPERATORS -- p73
# 3.5 高水準演算子 -- p75

# 3.5.1 Find CITY for supplier S1.
# 3.5.1 納入業者 S1 に対して CITY を見つけること。

print "#### 3.5.1 ####" ;;
pp [|city|
    val (sno:, city:) <- S::rows if sno == @S1
] ;;
# --> ["London"]
nl () ;;


# 3.5.2 Find S# and STATUS for suppliers in Paris.
# 3.5.2 Paris にある納入業者に対して S# と STATUS を見つけること。

print "#### 3.5.2 ####" ;;
pp [|sno:, status:|
    val (sno:, status:, city:) <- S::rows if city == "Paris"
] ;;
# --> [(sno: @S2, status: 10), (sno: @S3, status: 30)]
nl () ;;


# 3.5.3 Find PNAME for parts supplied by suppliers S1.
# 3.5.3 納入業者 S1 から納入される部品に対して PNAME を見つけること。

print "#### 3.5.3 ####" ;;
pp [|pname|
    val (sno:, pno: sp-pno       ) <- SP::rows if sno == @S1
    val (      pno: p-pno, pname:) <- P::rows

    if sp-pno == p-pno
] ;;
# --> ["Nut", "Bolt", "Screw"]
nl () ;;


# 3.5.4 For each part supplied, find P# and names of all cities supplying
#       the parts.
# 3.5.4 納入される各部品に対して、P# およびその部品を納入しているすべての
#       都市の名前を見つけること。

print "#### 3.5.4 ####" ;;
pp [|pno:, city:|
    val (sno: sp-sno, pno:)  <- SP::rows
    val (sno: s-sno,  city:) <- S::rows

    if sp-sno == s-sno
] ;;
# --> [
#     (pno: @P1, city: "London"),
#     (pno: @P2, city: "London"),
#     (pno: @P3, city: "London"),
#     (pno: @P1, city: "Paris"),
#     (pno: @P2, city: "Paris"),
#     (pno: @P2, city: "Paris")
# ]
nl () ;;



# 4 Relational Data Structures -- p83
# 4 関係型データ構造 -- p65

# 4.5 SUMMARY -- p91
# 4.5 要約 -- p96

structure SUPPLIERS = struct {
    fun sno    = row : Tuple -> row$1
    fun sname  = row : Tuple -> row$2
    fun status = row : Tuple -> row$3
    fun city   = row : Tuple -> row$4

    val rows = map { row -> (
            sno:    sno row,
            sname:  sname row,
            status: status row,
            city:   city row
        )
    } [
    #    S#    SNAME   STATUS CITY
    #------------------------------------
        (@S1, "Smith", 20,   "London"),
        (@S2, "Jones", 10,   "Paris"),
        (@S3, "Blake", 30,   "Paris"),
        (@S4, "Clark", 20,   "London"),
        (@S5, "Adams", 30,   "Athens")
    ]
}


structure PARTS = struct {
    fun pno    = row : Tuple -> row$1
    fun pname  = row : Tuple -> row$2
    fun color  = row : Tuple -> row$3
    fun weight = row : Tuple -> row$4
    fun city   = row : Tuple -> row$5

    val rows = map { row -> (
            pno:    pno row,
            pname:  pname row,
            color:  color row,
            weight: weight row,
            city:   city row
        )
    } [
    #     P#   PNAME    COLOR   WEIGHT CITY
    #---------------------------------------------
        (@P1, "Nut",   "Red",   12,   "London"),
        (@P2, "Bolt",  "Green", 17,   "Paris"),
        (@P3, "Screw", "Blue",  17,   "Rome"),
        (@P4, "Screw", "Red",   14,   "London"),
        (@P5, "Cam",   "Blue",  12,   "Paris"),
        (@P6, "Cog",   "Red",   19,   "London")
    ]
}


structure SHIPMENTS = struct {
    fun sno = row : Tuple -> row$1
    fun pno = row : Tuple -> row$2
    fun qty = row : Tuple -> row$3

    val rows = map { row -> (
            sno: sno row,
            pno: pno row,
            qty: qty row
        )
    } [
    #     S#   P#  QTY
    #---------------------
        (@S1, @P1, 300),
        (@S1, @P2, 200),
        (@S1, @P3, 400),
        (@S1, @P4, 200),
        (@S1, @P5, 100),
        (@S1, @P6, 100),
        (@S2, @P1, 300),
        (@S2, @P2, 400),
        (@S3, @P2, 200),
        (@S4, @P2, 200),
        (@S4, @P4, 300),
        (@S4, @P5, 400)
    ]
}


structure S  = SUPPLIERS
structure P  = PARTS
structure SP = SHIPMENTS

;;



# 7 System R Data Manipulation -- p117
# 7 システムRのデータ操作 -- p121

# 7.2 RETRIEVAL OPERATIONS -- p117
# 7.2 検索操作 -- p121

# Get supplier numbers and status for suppliers in Paris
# Paris の納入業者について納入業者番号と状態を求めよ
(#
    SELECT S#, STATUS
    FROM   S
    WHERE  CITY = 'PARIS'
#)

print "#### 7.2 ####" ;;
pp [|sno:, status:|
    val (sno:, status:, city:) <- S::rows if city == "Paris"
] ;;
# --> [(sno: @S2, status: 10), (sno: @S3, status: 30)]
nl () ;;


# 7.2.1 Simple retrieval: Get part numbers for all parts supplied.
# 7.2.1 単純検索: 納入されたすべての部品に対して部品番号を求める。
(#
    SELECT P#
    FROM   SP
#)

print "#### 7.2.1 ####" ;;
pp [|pno| val (pno:) <- SP::rows] ;;
# --> [@P1, @P2, @P3, @P4, @P5, @P6, @P1, @P2, @P2, @P2, @P4, @P5]
nl () ;;


# 7.2.2 Simple retrieval: Get full details of all suppliers.
# 7.2.2 単純検索: すべての納入業者の完全な記述を求める。
(#
    SELECT *
    FROM   S
#)

print "#### 7.2.2 ####" ;;
pp [|sp| val sp <- SP::rows] ;;
# --> [
#     (sno: @S1, pno: @P1, qty: 300),
#     (sno: @S1, pno: @P2, qty: 200),
#     (sno: @S1, pno: @P3, qty: 400),
#     (sno: @S1, pno: @P4, qty: 200),
#     (sno: @S1, pno: @P5, qty: 100),
#     (sno: @S1, pno: @P6, qty: 100),
#     (sno: @S2, pno: @P1, qty: 300),
#     (sno: @S2, pno: @P2, qty: 400),
#     (sno: @S3, pno: @P2, qty: 200),
#     (sno: @S4, pno: @P2, qty: 200),
#     (sno: @S4, pno: @P4, qty: 300),
#     (sno: @S4, pno: @P5, qty: 400)
# ]
nl () ;;


# 7.2.3 Qualified retrieval: Get supplier numbers for suppliers in Paris
#       with status > 20.
# 7.2.3 限定検索: 状態 >20 なる Paris の納入業者に対する納入業者番号を
#       求める。
(#
    SELECT S#
    FROM   S
    WHERE  CITY = 'PARIS'
    AND    STATUS > 20
#)

print "#### 7.2.3 ####" ;;
pp [|sno|
    val (sno:, status:, city:) <- S::rows

    if city == "Paris" && status > 20
] ;;
# --> [@S3]
nl () ;;


# 7.2.4 Retrieval with ordring: Get supplier numbers and status for
#       suppliers in Paris, in descending order of status.
# 7.2.4 順序付けを伴う検索: Paris の納入業者に対する納入業者番号と状態を
#       状態の降順で求める。
(#
    SELECT S#, STATUS
    FROM   S
    WHERE  CITY = 'PARIS'
    ORDER  BY STATUS DESC
#)


# 7.2.5 Retrieval with ordring: Get supplier numbers and status for 
#       suppliers in Paris, in descending order of status.
# 7.2.5 2個以上の表からの検索: 納入された各部品について、部品番号および
#       その部品を納入しているすべての都市の名前を求める。
(#
    SELECT UNIQUE P#, CITY
    FROM   SP, S
    WHERE  SP.S# = S.S#
#)
